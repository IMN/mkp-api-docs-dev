{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "IMN marketplace API- DEV",
    "description": "\r\n# The REST API of IMN system - Marketplace\r\n## Overview\r\nThe REST APIs provide programmatic access to read and write IMN data. \r\n\r\nThis API allows the marketplace to push data to IMN.\r\n\r\n\r\nThe main features are:\r\n- Push merchant offers\r\n- Push merchant orders\r\n- ...\r\n\r\n\r\n## Things to keep in mind\r\n### API Rate Limits\r\n- The IMN REST API is limited to 100 calls/minute.\r\n\r\n### Media type\r\nThe default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.\r\n\r\n### Required content type\r\nThe required and default encoding for the request and responses is UTF8.\r\n\r\n### Required date time format\r\nAll our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.\r\n\r\n### Base URL\r\nAll URLs returned by the IMN API are relative to this base URL, and all requests to the REST API must use this base URL template.\r\n\r\nYou can test our API on https://mkp-api-docs.imn.io/swagger-ui\\\\\r\nYou can contact us on [gitter, #IMN/API](https://gitter.im/IMN/API)\r\n\r\n",
    "x-logo": {
      "url": "https://imngo.blob.core.windows.net/imngo/images/imn-logo.png",
      "backgroundColor": "#FFFFFF"
    },
    "contact": {
      "email": "support@imn.io"
    },
    "license": {
      "name": "IMN",
      "url": "https://go.imn.io"
    }
  },
  "host": "api.imn.io",
  "x-IMN-api-ops": {
    "codeGenType": "webapi",
    "product": "IMN-CORE",
    "group": "merchant",
    "applicationShortName": "MKP.MER.WS",
    "repo": "IMN",
    "appRoot": "IMN.MKP.MER.WebService",
    "apiName": "MarketplaceMerchantsV1",
    "namespace": "IMN.MKP.MER.WebService",
    "useBeezUPFrameworkVersion2": true,
    "comment": "No change. Just server side generation.\n",
    "using": [
      "IMN.Schemas",
      "IMN.MER.Schemas",
      "IMN.MER.Exceptions"
    ]
  },
  "x-basePath": "/marketplace/merchants/v1",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Marketplace - Merchants API - Global",
      "x-displayName": "Global"
    },
    {
      "name": "Marketplace - Merchants API - Merchants",
      "x-displayName": "Merchants"
    },
    {
      "name": "Marketplace - Merchants API - Api Credentials",
      "x-displayName": "Api Credentials"
    },
    {
      "name": "Marketplace - Merchants API - Subscription",
      "x-displayName": "Subscription"
    },
    {
      "name": "Marketplace - Merchants API - Marketplace Merchant Code",
      "x-displayName": "Marketplace Merchant Code"
    },
    {
      "name": "Marketplace API - Offers - Global",
      "x-displayName": "Global"
    },
    {
      "name": "Marketplaces - Orders - Order Change Reporting",
      "description": "The order change reporting operations",
      "x-displayName": "Order Change Reporting"
    },
    {
      "name": "Marketplaces - Orders - Batches",
      "description": "All batch operations on Orders to reduce call rate",
      "x-displayName": "Batches"
    },
    {
      "name": "Marketplace API - List of Values - LOV",
      "description": "All LOV operations",
      "x-displayName": "LOV"
    }
  ],
  "paths": {
    "/marketplace/merchants/v1/{marketplaceCode}": {
      "get": {
        "tags": [
          "Marketplace - Merchants API - Global"
        ],
        "summary": "Get marketplace index in the merchants API",
        "description": "Indicates you all the actions you can do this api",
        "operationId": "GetMarketplaceMerchantApiIndex",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The Marketplace Merchant Api Index",
            "schema": {
              "$ref": "#/definitions/marketplaceMerchantApiIndex"
            }
          },
          "404": {
            "$ref": "#/responses/marketplaceNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/merchants/v1/{marketplaceCode}/incoming": {
      "post": {
        "tags": [
          "Marketplace - Merchants API - Merchants"
        ],
        "summary": "Get the list of incoming merchants related to a marketplace",
        "operationId": "GetIncomingMerchantList",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/pageSizeQueryStringParameter"
          },
          {
            "$ref": "#/parameters/pageNumberQueryStringParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/incomingMerchantListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/incomingMerchantList"
            }
          },
          "404": {
            "$ref": "#/responses/marketplaceNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/merchants/v1/{marketplaceCode}/incoming/{merchantCode}": {
      "get": {
        "tags": [
          "Marketplace - Merchants API - Merchants"
        ],
        "summary": "Get the incoming merchant",
        "operationId": "GetIncomingMerchantIndex",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/merchantCodeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The incoming merchant index",
            "schema": {
              "$ref": "#/definitions/incomingMerchantIndex"
            }
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/merchants/v1/{marketplaceCode}/outgoing": {
      "post": {
        "tags": [
          "Marketplace - Merchants API - Merchants"
        ],
        "summary": "Get the list of outgoing merchants related to a marketplace",
        "operationId": "GetOutgoingMerchantList",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/pageSizeQueryStringParameter"
          },
          {
            "$ref": "#/parameters/pageNumberQueryStringParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/outgoingMerchantListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/outgoingMerchantList"
            }
          },
          "404": {
            "$ref": "#/responses/marketplaceNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/merchants/v1/{marketplaceCode}/outgoing/{merchantCode}": {
      "get": {
        "tags": [
          "Marketplace - Merchants API - Merchants"
        ],
        "summary": "Get the outgoing merchant",
        "operationId": "GetOutgoingMerchantIndex",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/merchantCodeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The outgoing merchant index",
            "schema": {
              "$ref": "#/definitions/outgoingMerchantIndex"
            }
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/merchants/v1/{marketplaceCode}/{merchantCode}/apiCredential": {
      "get": {
        "tags": [
          "Marketplace - Merchants API - Api Credentials"
        ],
        "summary": "Get the merchant API credential",
        "operationId": "GetMerchantApiCredential",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/merchantCodeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The merchant API credential",
            "schema": {
              "$ref": "#/definitions/marketplaceApiCredential"
            }
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      },
      "put": {
        "tags": [
          "Marketplace - Merchants API - Api Credentials"
        ],
        "summary": "Save the marketplace API credential",
        "operationId": "SaveMerchantApiCredential",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "name": "credential",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/marketplaceApiCredential"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Merchant API credentials saved"
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "400": {
            "$ref": "#/responses/invalidMerchantCode"
          },
          "403": {
            "$ref": "#/responses/invalidMarketplaceCredential"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/merchants/v1/{marketplaceCode}/{merchantCode}/subscription/accept": {
      "post": {
        "tags": [
          "Marketplace - Merchants API - Subscription"
        ],
        "summary": "Accept a merchant subscription to a marketplace",
        "operationId": "AcceptMerchantSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/merchantCodeParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Merchant subscription accepted"
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "400": {
            "$ref": "#/responses/invalidMerchantCode"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/merchants/v1/{marketplaceCode}/{merchantCode}/subscription/decline": {
      "post": {
        "tags": [
          "Marketplace - Merchants API - Subscription"
        ],
        "summary": "Decline a merchant subscription to a marketplace",
        "operationId": "DeclineMerchantSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "name": "reason",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/merchantMarketplaceSubscriptionRefusalReason"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Merchant subscription declined"
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "400": {
            "$ref": "#/responses/invalidMerchantCode"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/merchants/v1/{marketplaceCode}/{merchantCode}/subscription/block": {
      "post": {
        "tags": [
          "Marketplace - Merchants API - Subscription"
        ],
        "summary": "Block a merchant subscription to the marketplace",
        "operationId": "BlockMerchantSubscription",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "name": "reason",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/merchantMarketplaceSubscriptionRefusalReason"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Merchant subscription blocked"
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "400": {
            "$ref": "#/responses/invalidMerchantCode"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/merchants/v1/{marketplaceCode}/{merchantCode}/configureMarketplaceMerchantCode": {
      "post": {
        "tags": [
          "Marketplace - Merchants API - Marketplace Merchant Code"
        ],
        "summary": "Configure marketplace merchant code",
        "description": "By configuring the merchant identifier of the marketplace the marketplace will be able  to found the merchant easily using this identifier",
        "operationId": "ConfigureMarketplaceMerchantCode",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "name": "marketplaceMerchantCode",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/marketplaceMerchantCode"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Marketplace merchant code configured"
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "400": {
            "$ref": "#/responses/invalidMerchantCode"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/offers/v1/{marketplaceCode}/{merchantCode}/purges/{correlationId}/done": {
      "post": {
        "tags": [
          "Marketplace API - Offers - Global"
        ],
        "summary": "Inform IMN about the offer purge completed",
        "operationId": "PurgeCompleted",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/correlationIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The purge completion has been saved"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/offers/v1/{marketplaceCode}/{merchantCode}/purges/{correlationId}/failed": {
      "post": {
        "tags": [
          "Marketplace API - Offers - Global"
        ],
        "summary": "Inform IMN about the offer purge failure",
        "operationId": "PurgeFailed",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/correlationIdParameter"
          },
          {
            "name": "request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/userErrorMessage"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The purge failure has been saved"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/offers/v1/{marketplaceCode}/{merchantCode}/events": {
      "post": {
        "tags": [
          "Marketplace API - Offers - Global"
        ],
        "summary": "Save a batch of marketplace merchant offers",
        "operationId": "SaveMarketplaceMerchantOfferBatch",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "name": "request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/batchMerchantMarketplaceOfferChanges"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The marketplace merchant offers changes have been saved!"
          },
          "400": {
            "$ref": "#/responses/offerBatchBadRequest"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/orders/v1/{marketplaceCode}/{merchantCode}/events": {
      "post": {
        "tags": [
          "Marketplaces - Orders - Batches"
        ],
        "operationId": "PushMerchantOrdersEvents",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "name": "request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/batchMerchantMarketplaceOrders"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The merchant orders changes have been saved!"
          },
          "400": {
            "$ref": "#/responses/orderBatchBadRequest"
          },
          "403": {
            "description": "The merchant has disabled the marketplace",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/orders/v1/{marketplaceCode}/{merchantCode}/{marketplaceOrderId}/changes/{correlationId}/done": {
      "post": {
        "tags": [
          "Marketplaces - Orders - Order Change Reporting"
        ],
        "operationId": "OrderChangeStatusCompleted",
        "summary": "Declare the completion of the order change request by the marketplace",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceOrderIdParameter"
          },
          {
            "$ref": "#/parameters/correlationIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The merchant orders changes have been saved!"
          },
          "400": {
            "description": "Something wrong in the request, please check the documentation.",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "404": {
            "$ref": "#/responses/orderChangeNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/orders/v1/{marketplaceCode}/{merchantCode}/{marketplaceOrderId}/changes/{correlationId}/failed": {
      "post": {
        "tags": [
          "Marketplaces - Orders - Order Change Reporting"
        ],
        "operationId": "OrderChangeStatusFailed",
        "summary": "Declare the failure of the order change request by the marketplace",
        "parameters": [
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceOrderIdParameter"
          },
          {
            "$ref": "#/parameters/correlationIdParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "The error that explains to the merchant why the order change has failed",
            "schema": {
              "$ref": "#/definitions/userErrorMessage"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The merchant order change failure has been processed"
          },
          "400": {
            "description": "Something wrong in the request, please check the documentation.",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "404": {
            "$ref": "#/responses/orderChangeNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/lov/v1/": {
      "get": {
        "summary": "Get all list names",
        "operationId": "GetUserLovIndex",
        "tags": [
          "Marketplace API - List of Values - LOV"
        ],
        "responses": {
          "200": {
            "description": "Get the list names",
            "headers": {
              "ETag": {
                "description": "The ETag corresponding to the LOV Index",
                "type": "string"
              },
              "Cache-Control": {
                "description": "Indicates the directive around the caching mechanisms.\\\nFor more information, please go to this link: https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/userLovIndex"
            }
          },
          "304": {
            "description": "The ETag sent in the http header If-None-Match did not change. So you can keep your version.",
            "headers": {
              "ETag": {
                "description": "The ETag corresponding to the LOV Index",
                "type": "string"
              },
              "Cache-Control": {
                "description": "Indicates the directive around the caching mechanisms.\\\nFor more information, please go to this link: https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/marketplace/lov/v1/{listName}": {
      "get": {
        "tags": [
          "Marketplace API - List of Values - LOV"
        ],
        "summary": "Get the list of values related to this list name",
        "operationId": "GetUserListOfValues",
        "parameters": [
          {
            "name": "listName",
            "in": "path",
            "required": true,
            "description": "The list of value name your want to get",
            "type": "string"
          },
          {
            "$ref": "#/parameters/acceptLanguageParameter"
          },
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of values",
            "headers": {
              "ETag": {
                "description": "The ETag corresponding to the LOV Index",
                "type": "string"
              },
              "Cache-Control": {
                "description": "Indicates the directive around the caching mechanisms.\\\nFor more information, please go to this link: https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              },
              "Content-Language": {
                "description": "Indicates the language use in the response",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/userListOfValuesResponse"
            }
          },
          "304": {
            "description": "The ETag sent in the http header If-None-Match did not change. So you can keep your version.",
            "headers": {
              "ETag": {
                "description": "The ETag corresponding to the LOV Index",
                "type": "string"
              },
              "Cache-Control": {
                "description": "Indicates the directive around the caching mechanisms.\\\nFor more information, please go to this link: https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "List not found",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    }
  },
  "definitions": {
    "marketplaceMerchantApiIndexLinks": {
      "type": "object",
      "required": [
        "incoming",
        "outgoing"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetMarketplaceMerchantApiIndexLink"
        },
        "incoming": {
          "$ref": "#/definitions/links.GetIncomingMerchantListLink"
        },
        "outgoing": {
          "$ref": "#/definitions/links.GetOutgoingMerchantListLink"
        }
      }
    },
    "marketplaceMerchantApiIndex": {
      "type": "object",
      "required": [
        "links"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/marketplaceMerchantApiIndexLinks"
        }
      }
    },
    "merchantListOrderBy": {
      "type": "object",
      "required": [
        "propertyName"
      ],
      "properties": {
        "propertyName": {
          "$ref": "#/definitions/merchantListOrderByOn"
        },
        "sort": {
          "$ref": "#/definitions/sort"
        }
      }
    },
    "incomingMerchantListRequest": {
      "type": "object",
      "properties": {
        "orderBy": {
          "$ref": "#/definitions/merchantListOrderBy"
        },
        "searchCompanyName": {
          "type": "string",
          "description": "Search merchants by company name",
          "example": "Literie"
        },
        "searchMerchantCode": {
          "type": "string",
          "description": "Search merchants by the code",
          "example": "MLT"
        },
        "searchMarketplaceMerchantCode": {
          "type": "string",
          "description": "Search merchants bymarketplace MerchantCode",
          "example": 50041
        },
        "searchContactEmail": {
          "type": "string",
          "description": "Search merchants by contact Email",
          "example": "contact@ma-boutique-en-ligne.com"
        },
        "searchContactName": {
          "type": "string",
          "description": "Search merchants by the contact name",
          "example": "Johnson"
        },
        "searchContactPhone": {
          "type": "string",
          "description": "Search merchants by the ContactPhone",
          "example": "+33711223344"
        },
        "filterSubscriptionRequestUtcDateFrom": {
          "type": "string",
          "format": "date-time",
          "description": "filter merchants From beginning subscription request date"
        },
        "filterSubscriptionRequestUtcDateTo": {
          "type": "string",
          "format": "date-time",
          "description": "filter merchants by subscription request date"
        },
        "filterCountry": {
          "type": "string",
          "description": "filter merchants by country code",
          "example": "FRA"
        },
        "filterSourceMarketplaceCode": {
          "type": "string",
          "description": "filter merchants by Source MarketplaceCode",
          "example": "C1"
        },
        "filterCredentialStatus": {
          "$ref": "#/definitions/marketplaceCredentialStatus"
        },
        "filterSubscriptionStatus": {
          "$ref": "#/definitions/marketplaceSubscriptionStatus"
        },
        "filterofferPublicationStatus": {
          "$ref": "#/definitions/marketplaceOfferPublicationStatus"
        }
      }
    },
    "outgoingMerchantListRequest": {
      "type": "object",
      "properties": {
        "orderBy": {
          "$ref": "#/definitions/merchantListOrderBy"
        },
        "searchCompanyName": {
          "type": "string",
          "description": "Search merchants by the company name",
          "example": "Literie"
        },
        "searchMerchantCode": {
          "type": "string",
          "description": "Search merchants by the code",
          "example": "MLT"
        },
        "searchMarketplaceMerchantCode": {
          "type": "string",
          "description": "Search merchants by the marketplaceMerchantCode",
          "example": 50041
        },
        "searchContactEmail": {
          "type": "string",
          "description": "Search merchants by the contactEmail",
          "example": "contact@ma-boutique-en-ligne.com"
        },
        "searchContactName": {
          "type": "string",
          "description": "Search merchants by the contact name",
          "example": "Johnson"
        },
        "searchContactPhone": {
          "type": "string",
          "description": "Search merchants by the ContactPhone",
          "example": "+33711223344"
        },
        "filterCreationUtcDateFrom": {
          "type": "string",
          "format": "date-time",
          "description": "filter merchants by From beginning creation date"
        },
        "filterCreationUtcDateTo": {
          "type": "string",
          "format": "date-time",
          "description": "filter merchants by to ending creation date"
        },
        "filterCountry": {
          "type": "string",
          "description": "filter merchants by country code",
          "example": "FRA"
        },
        "filterSubscriptionStatus": {
          "$ref": "#/definitions/marketplaceSubscriptionStatus"
        },
        "filterofferPublicationStatus": {
          "$ref": "#/definitions/marketplaceOfferPublicationStatus"
        }
      }
    },
    "incomingMerchantList": {
      "type": "object",
      "required": [
        "links"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/incomingMerchantListLinks"
        },
        "merchants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/incomingMerchantIndex"
          }
        },
        "paginationResult": {
          "$ref": "#/definitions/paginationResult"
        }
      }
    },
    "outgoingMerchantList": {
      "type": "object",
      "required": [
        "links"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/outgoingMerchantListLinks"
        },
        "merchants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/outgoingMerchantIndex"
          }
        },
        "paginationResult": {
          "$ref": "#/definitions/paginationResult"
        }
      }
    },
    "links.GetMerchantApiCredentialLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        }
      ]
    },
    "links.GetMerchantIndexLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        }
      ]
    },
    "links.GetIncomingMerchantIndexLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        }
      ]
    },
    "links.GetOutgoingMerchantIndexLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        }
      ]
    },
    "links.AcceptMerchantSubscriptionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        }
      ]
    },
    "links.DeclineMerchantSubscriptionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        }
      ]
    },
    "links.BlockMerchantSubscriptionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        }
      ]
    },
    "links.GetMarketplaceMerchantApiIndexLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        }
      ]
    },
    "links.GetIncomingMerchantListLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        }
      ]
    },
    "links.GetOutgoingMerchantListLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        }
      ]
    },
    "incomingMerchantInfoLinks": {
      "type": "object",
      "required": [
        "self",
        "apiCredential"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetIncomingMerchantIndexLink"
        },
        "apiCredential": {
          "$ref": "#/definitions/links.GetMerchantApiCredentialLink"
        },
        "acceptSubscription": {
          "$ref": "#/definitions/links.AcceptMerchantSubscriptionLink"
        },
        "declineSubscription": {
          "$ref": "#/definitions/links.DeclineMerchantSubscriptionLink"
        },
        "blockSubscription": {
          "$ref": "#/definitions/links.BlockMerchantSubscriptionLink"
        }
      }
    },
    "incomingMerchantListLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetIncomingMerchantListLink"
        }
      }
    },
    "outgoingMerchantListLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetOutgoingMerchantListLink"
        }
      }
    },
    "outgoingMerchantInfoLinks": {
      "type": "object",
      "required": [
        "self",
        "apiCredential"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetOutgoingMerchantIndexLink"
        },
        "apiCredential": {
          "$ref": "#/definitions/links.GetMerchantApiCredentialLink"
        }
      }
    },
    "incomingMerchantIndex": {
      "type": "object",
      "required": [
        "info",
        "links"
      ],
      "properties": {
        "info": {
          "$ref": "#/definitions/incomingMerchantInfo"
        },
        "links": {
          "$ref": "#/definitions/incomingMerchantInfoLinks"
        }
      }
    },
    "outgoingMerchantIndex": {
      "type": "object",
      "required": [
        "info",
        "links"
      ],
      "properties": {
        "info": {
          "$ref": "#/definitions/outgoingMerchantInfo"
        },
        "links": {
          "$ref": "#/definitions/outgoingMerchantInfoLinks"
        }
      }
    },
    "merchantInfo": {
      "type": "object",
      "required": [
        "code",
        "email",
        "companyName",
        "country",
        "firstName",
        "lastName",
        "phoneNumber",
        "creationUtcDate"
      ],
      "properties": {
        "code": {
          "$ref": "#/definitions/merchantCode"
        },
        "email": {
          "$ref": "#/definitions/email"
        },
        "companyName": {
          "$ref": "#/definitions/merchantCompanyName"
        },
        "country": {
          "$ref": "#/definitions/countryIsoCodeAlpha3"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "creationUtcDate": {
          "type": "string",
          "format": "date-time"
        },
        "importedOfferCount": {
          "type": "integer",
          "format": "int32",
          "description": "Imported offer count from the source marketplace"
        }
      }
    },
    "merchantTargetMarketplaceInfo": {
      "type": "object",
      "required": [
        "subscriptionStatus",
        "credentialStatus",
        "shippingSettingsStatus",
        "offerPublicationStatusd",
        "targetMarketplaceCode"
      ],
      "properties": {
        "subscriptionRequestUtcDate": {
          "type": "string",
          "format": "date-time",
          "description": "date the merchant pushed his registration to the marketplace (through SF), can be null when a merchant already has an"
        },
        "subscriptionStatus": {
          "$ref": "#/definitions/marketplaceSubscriptionStatus"
        },
        "credentialStatus": {
          "$ref": "#/definitions/marketplaceCredentialStatus"
        },
        "shippingSettingsStatus": {
          "$ref": "#/definitions/marketplaceShippingSettingsStatus"
        },
        "offerPublicationStatus": {
          "$ref": "#/definitions/marketplaceOfferPublicationStatus"
        },
        "publishedOfferCount": {
          "type": "integer",
          "format": "int32",
          "description": "Effective offer count published to the target marketplace"
        },
        "publishableOfferCount": {
          "type": "integer",
          "format": "int32",
          "description": "Publishable offer count to the target marketplace"
        },
        "targetMarketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        },
        "targetMarketplaceMerchantCode": {
          "$ref": "#/definitions/marketplaceMerchantCode"
        }
      }
    },
    "incomingMerchantInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/merchantInfo"
        },
        {
          "$ref": "#/definitions/merchantTargetMarketplaceInfo"
        },
        {
          "type": "object",
          "required": [
            "code",
            "email",
            "companyName",
            "firstName",
            "lastName",
            "phoneNumber",
            "sourceMarketplaceCode",
            "creationUtcDate",
            "subscriptionStatus",
            "credentialStatus",
            "shippingSettingsStatus",
            "offerPublicationStatus"
          ],
          "properties": {
            "sourceMarketplaceCode": {
              "$ref": "#/definitions/marketplaceCode"
            },
            "orderCount": {
              "type": "integer",
              "format": "int32",
              "example": 102
            },
            "turnOver": {
              "type": "number",
              "format": "decimal",
              "example": 10602.23
            },
            "currencyCode": {
              "$ref": "#/definitions/currencyCode"
            },
            "subscriptionHistory": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/marketplaceSubcriptionReporting"
              }
            }
          }
        }
      ]
    },
    "marketplaceSubcriptionReporting": {
      "type": "object",
      "required": [
        "senderEmail",
        "utcDate",
        "status"
      ],
      "properties": {
        "senderEmail": {
          "$ref": "#/definitions/email"
        },
        "utcDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/marketplaceSubscriptionStatus"
        },
        "message": {
          "type": "string"
        },
        "salesforceSubscriptionId": {
          "type": "string"
        }
      }
    },
    "outgoingMerchantInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/merchantInfo"
        },
        {
          "type": "object",
          "required": [
            "code",
            "email",
            "companyName",
            "firstName",
            "lastName",
            "phoneNumber",
            "sourceMarketplaceCode",
            "creationUtcDate"
          ],
          "properties": {
            "sourceMarketplaceCode": {
              "$ref": "#/definitions/marketplaceCode"
            },
            "sourceMarketplaceMerchantCode": {
              "$ref": "#/definitions/marketplaceMerchantCode"
            },
            "targetMarketplaces": {
              "type": "object",
              "description": "The key is the marketplace code",
              "additionalProperties": {
                "$ref": "#/definitions/merchantTargetMarketplaceInfo"
              }
            }
          }
        }
      ]
    },
    "merchantListOrderByOn": {
      "type": "string",
      "description": "Indicates on which property you want to order by the list of merchant",
      "default": "modificationUtcDate",
      "enum": [
        "merchantCode",
        "creationUtcDate",
        "modificationUtcDate"
      ]
    },
    "batchMerchantMarketplaceOrders": {
      "x-format": "Message",
      "type": "object",
      "description": "Create or replace orders for one marketplace for one merchant",
      "required": [
        "orders"
      ],
      "properties": {
        "orders": {
          "type": "array",
          "description": "Orders that need to be created or replaced",
          "minItems": 1,
          "maxItems": 1000,
          "items": {
            "$ref": "#/definitions/orderMarketplaceInfo"
          }
        }
      }
    },
    "userLovIndex": {
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/userLovIndexLinks"
        }
      }
    },
    "userLovIndexLinks": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetUserLovIndexLink"
        },
        "lists": {
          "$ref": "#/definitions/userLovLinks"
        }
      }
    },
    "userLovLinks": {
      "description": "List of lov link. The key is the list name.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/links.GetUserListOfValuesLink"
      }
    },
    "links.GetUserListOfValuesLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "example": {
            "href": "/v1/user/lov/Go2CultureName",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetUserLovIndexLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "example": {
            "href": "/v1/user/lov",
            "method": "GET"
          }
        }
      ]
    },
    "userListOfValuesResponse": {
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/userListOfValuesResponseLinks"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/listOfValueItem"
          }
        }
      }
    },
    "userListOfValuesResponseLinks": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetUserListOfValuesLink"
        }
      }
    },
    "beezUPOrderId": {
      "description": "The BeezUP Order identifier",
      "type": "string",
      "format": "uuid",
      "example": "00000000000000000000000000000000000000000000000"
    },
    "beezUPOrderIdentifier": {
      "description": "The BeezUP order identifier",
      "type": "object",
      "required": [
        "marketplaceTechnicalCode",
        "accountId",
        "beezUPOrderId"
      ],
      "properties": {
        "marketplaceTechnicalCode": {
          "$ref": "#/definitions/beezUPMarketplaceTechnicalCode"
        },
        "accountId": {
          "$ref": "#/definitions/beezUPMarketplaceAccountId"
        },
        "beezUPOrderId": {
          "$ref": "#/definitions/beezUPOrderId"
        }
      }
    },
    "beezUPOrderChangeExecutionSummary": {
      "allOf": [
        {
          "$ref": "#/definitions/beezUPOrderIdentifier"
        },
        {
          "type": "object",
          "description": "The BeezUP order change execution summary",
          "required": [
            "executionId",
            "correlationId",
            "merchantCode",
            "marketplaceCode",
            "marketplaceOrderId"
          ],
          "properties": {
            "executionId": {
              "$ref": "#/definitions/beezUPExecutionId"
            },
            "correlationId": {
              "$ref": "#/definitions/correlationId"
            },
            "merchantCode": {
              "$ref": "#/definitions/merchantCode"
            },
            "marketplaceCode": {
              "$ref": "#/definitions/marketplaceCode"
            },
            "marketplaceOrderId": {
              "$ref": "#/definitions/marketplaceOrderId"
            },
            "processingStatus": {
              "type": "string"
            },
            "errorCode": {
              "type": "string"
            },
            "errorMessage": {
              "type": "string"
            }
          }
        }
      ]
    },
    "orderReceived": {
      "x-exclude": true,
      "x-format": "Event",
      "description": "This event his a technical one. It is stored in the event hub before it's processed by the OrderActor.\nThe order actor will create business event like order created or updated.\nOrderReceived will be not be stored in the Event Store.\n",
      "allOf": [
        {
          "$ref": "#/definitions/orderMarketplaceInfo"
        }
      ]
    },
    "orderMerchantInfoConfigured": {
      "x-format": "Event",
      "type": "object",
      "required": [
        "order",
        "merchantInfo"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "merchantInfo": {
          "$ref": "#/definitions/orderMerchantInfo"
        }
      }
    },
    "orderMerchantInfoCleared": {
      "x-format": "Event",
      "type": "object",
      "required": [
        "order"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        }
      }
    },
    "orderChangeEventBase": {
      "x-exclude": true,
      "allOf": [
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "ipAddress",
            "testMode",
            "sourceType"
          ],
          "properties": {
            "order": {
              "$ref": "#/definitions/orderIdentifier"
            },
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userName": {
              "$ref": "#/definitions/orderChangeUserName"
            },
            "ipAddress": {
              "description": "The IP address who request this operation",
              "type": "string",
              "example": "127.0.0.1"
            },
            "testMode": {
              "description": "This operation was a test",
              "type": "boolean",
              "example": false
            },
            "sourceType": {
              "$ref": "#/definitions/operationSourceType"
            }
          }
        }
      ]
    },
    "orderAccepted": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeEventBase"
        }
      ]
    },
    "orderRefused": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeEventBase"
        }
      ]
    },
    "orderShipped": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeEventBase"
        },
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "carrierCode",
            "trackingNumber",
            "ipAddress",
            "testMode",
            "sourceType"
          ],
          "properties": {
            "carrierCode": {
              "$ref": "#/definitions/carrierCode"
            },
            "trackingNumber": {
              "$ref": "#/definitions/trackingNumber"
            }
          }
        }
      ]
    },
    "orderShippedWithTrackingUrl": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeEventBase"
        },
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "carrierName",
            "trackingNumber",
            "trackingUrl",
            "ipAddress",
            "testMode",
            "sourceType"
          ],
          "properties": {
            "carrierName": {
              "$ref": "#/definitions/carrierName"
            },
            "trackingNumber": {
              "$ref": "#/definitions/trackingNumber"
            },
            "trackingUrl": {
              "$ref": "#/definitions/trackingUrl"
            }
          }
        }
      ]
    },
    "orderRefunded": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeEventBase"
        },
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "refundReason",
            "ipAddress",
            "testMode",
            "sourceType"
          ],
          "properties": {
            "refundReason": {
              "$ref": "#/definitions/refundReason"
            }
          }
        }
      ]
    },
    "orderCancelled": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeEventBase"
        },
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "cancellationReason",
            "ipAddress",
            "testMode",
            "sourceType"
          ],
          "properties": {
            "cancellationReason": {
              "$ref": "#/definitions/cancellationReason"
            }
          }
        }
      ]
    },
    "orderChangeCompleted": {
      "x-format": "Event",
      "type": "object",
      "required": [
        "order",
        "status"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "status": {
          "$ref": "#/definitions/processingStatus"
        },
        "error": {
          "$ref": "#/definitions/userErrorMessage"
        }
      }
    },
    "configureOrderMerchantInfo": {
      "x-format": "Command",
      "type": "object",
      "required": [
        "order",
        "merchantInfo"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "merchantInfo": {
          "$ref": "#/definitions/orderMerchantInfo"
        }
      }
    },
    "clearOrderMerchantInfo": {
      "x-format": "Command",
      "type": "object",
      "required": [
        "order"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        }
      }
    },
    "orderChangeCommandBase": {
      "x-exclude": true,
      "type": "object",
      "required": [
        "order",
        "userId",
        "userName",
        "ipAddress",
        "testMode",
        "sourceType",
        "etag"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "userId": {
          "$ref": "#/definitions/userId"
        },
        "userName": {
          "$ref": "#/definitions/orderChangeUserName"
        },
        "ipAddress": {
          "description": "The IP address who request this operation",
          "type": "string",
          "example": "127.0.0.1"
        },
        "testMode": {
          "description": "This operation was a test",
          "type": "boolean",
          "example": false
        },
        "sourceType": {
          "$ref": "#/definitions/operationSourceType"
        },
        "etag": {
          "$ref": "#/definitions/orderEtag"
        }
      }
    },
    "acceptOrder": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeEventBase"
        },
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "ipAddress",
            "testMode",
            "sourceType",
            "etag"
          ],
          "properties": {
            "etag": {
              "$ref": "#/definitions/orderEtag"
            }
          }
        }
      ]
    },
    "refuseOrder": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeEventBase"
        },
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "ipAddress",
            "testMode",
            "sourceType",
            "etag"
          ],
          "properties": {
            "etag": {
              "$ref": "#/definitions/orderEtag"
            }
          }
        }
      ]
    },
    "shipOrder": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeEventBase"
        },
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "carrierCode",
            "trackingNumber",
            "ipAddress",
            "testMode",
            "sourceType",
            "etag"
          ],
          "properties": {
            "carrierCode": {
              "$ref": "#/definitions/carrierCode"
            },
            "trackingNumber": {
              "$ref": "#/definitions/trackingNumber"
            },
            "etag": {
              "$ref": "#/definitions/orderEtag"
            }
          }
        }
      ]
    },
    "shipOrderWithTrackingUrl": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeEventBase"
        },
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "carrierName",
            "trackingNumber",
            "trackingUrl",
            "ipAddress",
            "testMode",
            "sourceType",
            "etag"
          ],
          "properties": {
            "carrierName": {
              "$ref": "#/definitions/carrierName"
            },
            "trackingNumber": {
              "$ref": "#/definitions/trackingNumber"
            },
            "trackingUrl": {
              "$ref": "#/definitions/trackingUrl"
            },
            "etag": {
              "$ref": "#/definitions/orderEtag"
            }
          }
        }
      ]
    },
    "refundOrder": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeEventBase"
        },
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "refundReason",
            "ipAddress",
            "testMode",
            "sourceType",
            "etag"
          ],
          "properties": {
            "refundReason": {
              "$ref": "#/definitions/refundReason"
            },
            "etag": {
              "$ref": "#/definitions/orderEtag"
            }
          }
        }
      ]
    },
    "cancelOrder": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeEventBase"
        },
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "cancellationReason",
            "ipAddress",
            "testMode",
            "sourceType",
            "etag"
          ],
          "properties": {
            "cancellationReason": {
              "$ref": "#/definitions/cancellationReason"
            },
            "etag": {
              "$ref": "#/definitions/orderEtag"
            }
          }
        }
      ]
    },
    "orderManagementDisabledException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "description": "The merchant '{merchantCode}' has disabled the order management for marketplace '{marketplaceCode}'.\n",
      "type": "object",
      "required": [
        "marketplaceCode",
        "merchantCode"
      ],
      "properties": {
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        },
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        }
      }
    },
    "orderExceptionsBase": {
      "x-exclude": true,
      "type": "object",
      "required": [
        "marketplaceCode",
        "merchantCode",
        "marketplaceOrderId"
      ],
      "properties": {
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        },
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "marketplaceOrderId": {
          "$ref": "#/definitions/marketplaceOrderId"
        }
      }
    },
    "duplicateOrderOperationException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "description": "Duplicate operation on the order '{marketplaceOrderId}' has been {duplicateCount} times for the marketplace '{marketplaceCode}' and the merchant '{merchantCode}'.\n",
      "allOf": [
        {
          "$ref": "#/definitions/orderExceptionsBase"
        },
        {
          "type": "object",
          "required": [
            "duplicateCount"
          ],
          "properties": {
            "duplicateCount": {
              "type": "integer",
              "minimum": 2
            }
          }
        }
      ]
    },
    "orderNotFoundException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "description": "The order '{marketplaceOrderId}' is not found for the marketplace '{marketplaceCode}' and the merchant '{merchantCode}'\n",
      "allOf": [
        {
          "$ref": "#/definitions/orderExceptionsBase"
        }
      ]
    },
    "orderInvalidEtagException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "description": "The order change cannot be applied because the '{etag}' does not match the expetected one '{expectedETag}'.\nPlease reload your order and send the latest etag to change the order.\nIf the problem persist please contact our support team.\nMarkeplaceOrderId: '{marketplaceOrderId}'\nMarketplace: '{marketplaceCode}'\nMerchant: '{merchantCode}'\n",
      "allOf": [
        {
          "$ref": "#/definitions/orderExceptionsBase"
        },
        {
          "type": "object",
          "required": [
            "marketplaceCode",
            "merchantCode",
            "marketplaceOrderId",
            "invalidETag",
            "expectedETag"
          ],
          "properties": {
            "invalidETag": {
              "$ref": "#/definitions/orderEtag"
            },
            "expectedETag": {
              "$ref": "#/definitions/orderEtag"
            }
          }
        }
      ]
    },
    "orderChangeInvalidException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "description": "The order change type '{orderChangeType}' cannot be applied because the status of the order is '{imnOrderStatus}.\nIf the problem persist please contact our support team.\nMarketplaceOrderId: '{marketplaceOrderId}'\nMarketplace: '{marketplaceCode}'\nMerchant: '{merchantCode}'\n",
      "allOf": [
        {
          "$ref": "#/definitions/orderExceptionsBase"
        },
        {
          "type": "object",
          "required": [
            "marketplaceCode",
            "merchantCode",
            "marketplaceOrderId",
            "orderChangeType",
            "imnOrderStatus"
          ],
          "properties": {
            "orderChangeType": {
              "$ref": "#/definitions/orderChangeType"
            },
            "imnOrderStatus": {
              "$ref": "#/definitions/imnOrderStatus"
            }
          }
        }
      ]
    },
    "orderChangeNotFoundException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "description": "The order change '{correlationId}' is not found.\nMarketplaceOrderId: '{marketplaceOrderId}'\nMarketplace: '{marketplaceCode}'\nMerchant: '{merchantCode}'\n",
      "allOf": [
        {
          "$ref": "#/definitions/orderExceptionsBase"
        },
        {
          "type": "object",
          "required": [
            "marketplaceCode",
            "merchantCode",
            "marketplaceOrderId",
            "correlationId"
          ],
          "properties": {
            "correlationId": {
              "$ref": "#/definitions/correlationId"
            }
          }
        }
      ]
    },
    "orderChangeAlreadyInProgressException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "description": "There is an order change currently is progress for the '{marketplaceOrderId}' for the marketplace '{marketplaceCode}' and the merchant '{merchantCode}'. |\nCurrent CorrelationId: '{currentCorrelationId}'\n",
      "allOf": [
        {
          "$ref": "#/definitions/orderExceptionsBase"
        },
        {
          "type": "object",
          "required": [
            "marketplaceCode",
            "merchantCode",
            "marketplaceOrderId",
            "currentCorrelationId"
          ],
          "properties": {
            "currentCorrelationId": {
              "$ref": "#/definitions/correlationId"
            }
          }
        }
      ]
    },
    "imnOrderStatus": {
      "type": "string",
      "description": "IMN order status. Unified for all marketplaces.",
      "example": "shipped",
      "x-lov": "imnOrderStatus",
      "enum": [
        "New",
        "Pending",
        "InProgress",
        "Received",
        "Shipped",
        "Cancelled",
        "Closed",
        "AvailableOnStore"
      ]
    },
    "marketplaceOrderStatus": {
      "description": "The marketplace order state",
      "type": "string",
      "example": "In_progress_3"
    },
    "marketplaceOrderId": {
      "description": "The order marketplace identifier",
      "type": "string",
      "example": "CDISCOUNT12345"
    },
    "orderChangeUserName": {
      "type": "string",
      "description": "The name of the user who did the order change"
    },
    "merchantOrderId": {
      "description": "The order merchant identifier",
      "type": "string",
      "example": "MyOrderMerchantId"
    },
    "merchantECommerceSoftwareVersion": {
      "description": "The e-commece software version of the merchant",
      "type": "string",
      "example": "123.0.1"
    },
    "orderDateSearchType": {
      "description": "Indicates on which date you want to make the filter",
      "type": "string",
      "enum": [
        "IMNModification",
        "Purchase",
        "MarketplaceModification"
      ],
      "default": "IMNModification"
    },
    "orderEtag": {
      "description": "ETag value to identify the order.\\\nThis information is required for the operation GetOrder and ChangeOrder.\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n",
      "type": "string",
      "example": "\"ca071a4580129f932a03971968ffef69\""
    },
    "orderProcessing": {
      "description": "If true, there is currently a harvest or an order change in progress. Otherwise false.",
      "type": "boolean",
      "example": false
    },
    "orderIdentifier": {
      "type": "object",
      "required": [
        "marketplaceCode",
        "merchantCode",
        "marketplaceOrderId"
      ],
      "properties": {
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        },
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "marketplaceOrderId": {
          "$ref": "#/definitions/marketplaceOrderId"
        }
      }
    },
    "carrierName": {
      "type": "string",
      "description": "The carrier name related to the shipping",
      "example": "My special carrier name"
    },
    "trackingUrl": {
      "type": "string",
      "description": "The tracking url related to the shipping",
      "example": "https://trackingpackage.com?number=1H01845163783"
    },
    "trackingNumber": {
      "type": "string",
      "description": "The shipper tracking number related to the shipping",
      "example": "1H01845163783"
    },
    "carrierCode": {
      "type": "string",
      "example": "MondialRelay",
      "description": "The carrier code related to the shipping\n* DeutschePost: DeutschePost\n* DHL: DHL\n* GLS: GLS\n* TNT: TNT\n* UPS: UPS\n* DPD: DPD\n* FEDEX: FEDEX\n* 4PX: 4PX\n* Bpost: Bpost\n* ChinaEMSePacket: China EMS (ePacket)\n* ChinaPost: China Post\n* Chronopost: Chronopost\n* CNEExpress: CNE Express\n* ColisPrive: Colis PrivÃ©\n* Colissimo: Colissimo\n* GEODIS: GEODIS\n* LaPosteCourrier: La Poste - Courrier\n* MalaysiaPost: Malaysia Post\n* MondialRelay: Mondial Relay\n* PostNL: PostNL\n* RelaisColis: Relais Colis\n* RoyalMail: Royal Mail\n* SFExpress: SF Express\n* SFCService: SFC Service\n* SingaporePost: Singapore Post\n* USPS: USPS\n* Yanwen: Yanwen\n* AMATI: AMATI\n* BRTID: BRTID\n* BRTRIFMIT: BRTRIFMIT\n* BRTSPED: BRTSPED\n* CORREOS: CORREOS\n* ENERGO: ENERGO\n* FERCAM: FERCAM\n* NEXIVE: NEXIVE\n* ItalianPost: Italian Post\n* SDA: SDA\n* SGTFlyer: SGT Flyer\n* TECNOTRANS: TECNOTRANS\n* Bursped: Bursped\n* Cargoline: Cargoline\n* Computeruniverse: Computeruniverse\n* Dachser: Dachser\n* DHLFreight: DHL Freight\n* dtl: dtl\n* Emons: Emons\n* GEL: GEL\n* Hellmann: Hellmann\n* Hermes: Hermes\n* Hermes2MH: Hermes 2 MH\n* IDSLogistik: IDS Logistik\n* Iloxx: Iloxx\n* KuehneNagel: Kuehne & Nagel\n* Marktanlieferung: Marktanlieferung\n* Rhenus: Rhenus\n* Schenker: Schenker\n* SpeditionGuettler: Spedition Guettler\n",
      "enum": [
        "DeutschePost",
        "DHL",
        "GLS",
        "TNT",
        "UPS",
        "DPD",
        "FEDEX",
        "4PX",
        "Bpost",
        "ChinaEMSePacket",
        "ChinaPost",
        "Chronopost",
        "CNEExpress",
        "ColisPrive",
        "Colissimo",
        "GEODIS",
        "LaPosteCourrier",
        "MalaysiaPost",
        "MondialRelay",
        "PostNL",
        "RelaisColis",
        "RoyalMail",
        "SFExpress",
        "SFCService",
        "SingaporePost",
        "USPS",
        "Yanwen",
        "AMATI",
        "BRTID",
        "BRTRIFMIT",
        "BRTSPED",
        "CORREOS",
        "ENERGO",
        "FERCAM",
        "NEXIVE",
        "ItalianPost",
        "SDA",
        "SGTFlyer",
        "TECNOTRANS",
        "Bursped",
        "Cargoline",
        "Computeruniverse",
        "Dachser",
        "DHLFreight",
        "dtl",
        "Emons",
        "GEL",
        "Hellmann",
        "Hermes",
        "Hermes2MH",
        "IDSLogistik",
        "Iloxx",
        "KuehneNagel",
        "Marktanlieferung",
        "Rhenus",
        "Schenker",
        "SpeditionGuettler"
      ]
    },
    "cancellationReason": {
      "type": "string",
      "description": "The reason why you cancel the order",
      "enum": [
        "WrongPrice",
        "DelayedInventory",
        "WrongProductInfo",
        "BuyerFeedbackTimeout",
        "BuyerAgreement",
        "BuyerCancelled",
        "NoInventory",
        "ShippingAddressUndeliverable",
        "Other"
      ]
    },
    "refundReason": {
      "type": "string",
      "description": "The reason why you refund the order",
      "enum": [
        "BuyerWarrantyOrRetractation",
        "WrongPrice",
        "LateDelivery",
        "IncorrectDelivery",
        "IncompleteDelivery",
        "DamagedDelivery",
        "BuyerFeedbackTimeout",
        "BuyerAgreement",
        "BuyerCancelled",
        "NoInventory",
        "ShippingAddressUndeliverable",
        "Other"
      ]
    },
    "orderItem": {
      "description": "Describe an order item.",
      "type": "object",
      "required": [
        "imnOrderItemId"
      ],
      "properties": {
        "imnOrderItemId": {
          "description": "The IMN identifier of the order Item. Must be unique in the order.",
          "type": "string",
          "example": "1"
        },
        "title": {
          "description": "The title of the order item",
          "example": "bLA acide-plomb 6v-4.5ah 70x48x106mm",
          "type": "string"
        },
        "condition": {
          "description": "The condition of the order item",
          "example": "new",
          "type": "string"
        },
        "imageUrl": {
          "description": "The URL of the image of the order item",
          "example": "http://blabla.com//das6-45.jpg",
          "type": "string"
        },
        "merchantOfferSku": {
          "$ref": "#/definitions/sku"
        },
        "gtin": {
          "$ref": "#/definitions/gtin"
        },
        "marketplaceProductId": {
          "description": "The marketplace product identifier of the order item",
          "example": "MarketplaceProductId",
          "type": "string"
        },
        "marketplaceProductUrl": {
          "$ref": "#/definitions/httpUrl"
        },
        "itemPrice": {
          "description": "The price of the order item",
          "example": 6.86,
          "type": "number",
          "format": "decimal"
        },
        "itemTax": {
          "description": "The tax of the order item",
          "type": "number",
          "format": "decimal",
          "example": 0.0
        },
        "quantity": {
          "description": "The quantity of the order item",
          "example": 1,
          "type": "number",
          "format": "decimal"
        },
        "shippingPrice": {
          "description": "The shipping price of the order item",
          "type": "number",
          "example": 0.0,
          "format": "decimal"
        },
        "totalPrice": {
          "description": "The total price of the order item",
          "example": 6.86,
          "type": "number",
          "format": "decimal"
        }
      }
    },
    "orderBillingInfo": {
      "type": "object",
      "description": "The billing information related to the order",
      "properties": {
        "customer": {
          "$ref": "#/definitions/orderCustomer"
        },
        "address": {
          "$ref": "#/definitions/postalAddress"
        }
      }
    },
    "orderShippingInfo": {
      "type": "object",
      "description": "The shipping information related to the order",
      "properties": {
        "contact": {
          "$ref": "#/definitions/person"
        },
        "relayId": {
          "description": "The company name of The address for this order",
          "type": "string",
          "example": "My Company"
        },
        "address": {
          "$ref": "#/definitions/postalAddress"
        },
        "price": {
          "description": "The shipping price of this order",
          "type": "number",
          "format": "decimal",
          "example": 6.9
        },
        "method": {
          "description": "The shipping method of this order",
          "type": "string",
          "example": "DPD Domicile"
        },
        "fulfilledBy": {
          "description": "The shipment is fulfilled by",
          "type": "string",
          "example": "Cdiscount Fulfillment"
        },
        "tax": {
          "description": "The shipping tax for this order",
          "type": "number",
          "format": "decimal",
          "example": 0.0
        },
        "earliestShipUtcDate": {
          "description": "The UTC date of the earliest ship for this order",
          "type": "string",
          "example": "2017-04-02T21:30:00Z",
          "format": "date-time"
        },
        "latestShipUtcDate": {
          "description": "The UTC date of the latest ship for this order",
          "type": "string",
          "format": "date-time",
          "example": "2017-04-30T21:30:00Z"
        }
      }
    },
    "orderCustomer": {
      "allOf": [
        {
          "$ref": "#/definitions/person"
        },
        {
          "type": "object",
          "description": "The customer",
          "properties": {
            "customerIdentifier": {
              "description": "The buyer identifier for this order",
              "type": "string",
              "example": "1234567890"
            }
          }
        }
      ]
    },
    "person": {
      "type": "object",
      "properties": {
        "civility": {
          "description": "The civility of the person",
          "type": "string",
          "example": "MRS"
        },
        "firstName": {
          "description": "The first name of the person",
          "type": "string",
          "example": "Jacques"
        },
        "lastName": {
          "description": "The last name of the person",
          "type": "string",
          "example": "BAUREGARD"
        },
        "companyName": {
          "type": "string",
          "description": "The company name of the person",
          "example": "App"
        },
        "email": {
          "$ref": "#/definitions/email"
        },
        "phoneNumber": {
          "$ref": "#/definitions/telephoneNumber"
        },
        "mobilePhoneNumber": {
          "$ref": "#/definitions/telephoneNumber"
        }
      }
    },
    "telephoneNumber": {
      "type": "string",
      "description": "The telephone number",
      "example": "+33000000042"
    },
    "postalAddress": {
      "type": "object",
      "properties": {
        "line1": {
          "description": "The address line 1",
          "type": "string",
          "example": "5 rue amÃ©lie"
        },
        "line2": {
          "description": "The address line 2",
          "type": "string",
          "example": "BDR"
        },
        "line3": {
          "description": "The address line 3",
          "type": "string",
          "example": "RDC"
        },
        "comment": {
          "description": "The comment to access to this address",
          "type": "string",
          "example": "The instructions from the buyer"
        },
        "postalCode": {
          "description": "The address postal code",
          "type": "string",
          "example": "13014"
        },
        "city": {
          "description": "The address city",
          "type": "string",
          "example": "Marseille"
        },
        "stateOrRegion": {
          "description": "The address state or region",
          "type": "string",
          "example": "BDR"
        },
        "countryName": {
          "description": "The address country name",
          "type": "string",
          "example": "France"
        },
        "countryIsoCodeAlpha2": {
          "description": "The address country iso code alpha 2 (see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#/decoding_table for more details)",
          "type": "string",
          "example": "FR"
        }
      }
    },
    "orderGeneralInfo": {
      "type": "object",
      "required": [
        "imnOrderStatus",
        "marketplaceOrderStatus",
        "purchaseUtcDate",
        "marketplaceLastModificationUtcDate"
      ],
      "properties": {
        "imnOrderStatus": {
          "$ref": "#/definitions/imnOrderStatus"
        },
        "marketplaceOrderStatus": {
          "$ref": "#/definitions/marketplaceOrderStatus"
        },
        "purchaseUtcDate": {
          "description": "The purchase date of this order",
          "format": "date-time",
          "type": "string",
          "example": "2017-03-31T21:30:23Z"
        },
        "marketplaceLastModificationUtcDate": {
          "description": "The last modification UTC date done by the marketplace on this order",
          "format": "date-time",
          "type": "string",
          "example": "2017-04-16T10:25:23Z"
        },
        "marketplaceChannel": {
          "description": "Useful to identify the origin of the order. For example in Cdiscount.",
          "type": "string",
          "example": "Cdiscount France"
        },
        "comment": {
          "description": "The comment associated to this order",
          "type": "string",
          "example": "This is a comment"
        }
      }
    },
    "orderMarketplaceInfo": {
      "description": "Describe the basic information related to an order.",
      "type": "object",
      "required": [
        "identifier",
        "etag",
        "generalInfo",
        "pricingInfo",
        "billingInfo",
        "shippingInfo",
        "orderItems"
      ],
      "properties": {
        "identifier": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "etag": {
          "$ref": "#/definitions/orderEtag"
        },
        "generalInfo": {
          "$ref": "#/definitions/orderGeneralInfo"
        },
        "pricingInfo": {
          "$ref": "#/definitions/orderPricingInfo"
        },
        "billingInfo": {
          "$ref": "#/definitions/orderBillingInfo"
        },
        "shippingInfo": {
          "$ref": "#/definitions/orderShippingInfo"
        },
        "orderItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/orderItem"
          }
        }
      }
    },
    "orderPricingInfo": {
      "type": "object",
      "required": [
        "totalPrice",
        "currencyCode"
      ],
      "properties": {
        "totalPrice": {
          "description": "The total price of this order (corresponding to the amount paid by the customer)",
          "format": "decimal",
          "type": "number",
          "example": 101.42
        },
        "currencyCode": {
          "$ref": "#/definitions/currencyCode"
        },
        "totalTax": {
          "description": "The total tax of this order",
          "type": "number",
          "format": "decimal",
          "example": 0.0
        },
        "totalCommission": {
          "description": "The total commission of this order",
          "type": "number",
          "format": "decimal",
          "example": 0.0
        },
        "additionalFee": {
          "description": "Additional fee related to this order",
          "type": "number",
          "format": "decimal",
          "example": 10.0
        },
        "paymentMethod": {
          "description": "The payment method of this order",
          "type": "string",
          "example": "1 / 1X"
        },
        "payingUtcDate": {
          "description": "The UTC date of the payment of this order",
          "type": "string",
          "format": "date-time",
          "example": "2017-04-01T13:22:01Z"
        }
      }
    },
    "orderMerchantInfo": {
      "type": "object",
      "description": "The information that concerns the merchant for this order",
      "required": [
        "merchantOrderId",
        "merchantECommerceSoftwareName",
        "merchantECommerceSoftwareVersion"
      ],
      "properties": {
        "merchantOrderId": {
          "$ref": "#/definitions/merchantOrderId"
        },
        "merchantECommerceSoftwareName": {
          "$ref": "#/definitions/ecommerceSoftwareName"
        },
        "merchantECommerceSoftwareVersion": {
          "$ref": "#/definitions/merchantECommerceSoftwareVersion"
        }
      }
    },
    "orderInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/orderMarketplaceInfo"
        },
        {
          "type": "object",
          "description": "Describe in details all informations related to an order.",
          "required": [
            "identifier",
            "etag",
            "generalInfo",
            "pricingInfo",
            "billingInfo",
            "shippingInfo",
            "orderItems",
            "imnInfo"
          ],
          "properties": {
            "merchantInfo": {
              "$ref": "#/definitions/orderMerchantInfo"
            },
            "imnInfo": {
              "$ref": "#/definitions/orderIMNInfo"
            }
          }
        }
      ]
    },
    "orderIMNInfo": {
      "type": "object",
      "description": "The current order change correlation identifier indicates you if there is a pending order change on the marketplace side.",
      "required": [
        "imnLastModificationUtcDate"
      ],
      "properties": {
        "imnLastModificationUtcDate": {
          "description": "The last modification UTC date done by IMN of this order",
          "format": "date-time",
          "type": "string",
          "example": "2017-04-16T10:30:23Z"
        },
        "currentOrderChangeCorrelationId": {
          "$ref": "#/definitions/correlationId"
        }
      }
    },
    "orderChangeType": {
      "type": "string",
      "x-lov": "OrderChangeBusinessOperationType",
      "example": "ship",
      "enum": [
        "Accept",
        "Refuse",
        "Ship",
        "ShipWithTrackingUrl",
        "Refund",
        "Cancel",
        "PickUp",
        "Restock"
      ]
    },
    "beezUPMerchantMarketplaceOffer": {
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceOffer"
        },
        {
          "$ref": "#/definitions/beezUPMarketplaceAccountIdentifier"
        }
      ]
    },
    "beezUPMerchantMarketplaceOfferIdentifier": {
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceOfferIdentifier"
        },
        {
          "$ref": "#/definitions/beezUPMarketplaceAccountIdentifier"
        }
      ]
    },
    "merchantOfferEventBase": {
      "x-exclude": true,
      "allOf": [
        {
          "$ref": "#/definitions/merchantOffer"
        }
      ]
    },
    "merchantOfferReceived": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantOfferEventBase"
        }
      ]
    },
    "merchantOfferCreated": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantOfferEventBase"
        }
      ]
    },
    "merchantOfferUpdated": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantOfferEventBase"
        }
      ]
    },
    "merchantOfferDeleted": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantOfferIdentifier"
        }
      ]
    },
    "merchantMarketplaceOfferEventBase": {
      "x-exclude": true,
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceOffer"
        }
      ]
    },
    "merchantMarketplaceOfferReceived": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceOfferEventBase"
        }
      ]
    },
    "merchantMarketplaceOfferCreated": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceOfferEventBase"
        }
      ]
    },
    "merchantMarketplaceOfferUpdated": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceOfferEventBase"
        }
      ]
    },
    "merchantMarketplaceOfferDeleted": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceOfferIdentifier"
        }
      ]
    },
    "merchantOfferNotImported": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantOfferIdentifier"
        },
        {
          "type": "object",
          "properties": {
            "reasons": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/merchantOfferNoneImportationReason"
              }
            }
          }
        }
      ]
    },
    "MerchantOfferPushQueueReminded": {
      "x-format": "Event",
      "description": "The merchant offer pusher is reminded",
      "allOf": [
        {
          "type": "object",
          "required": [
            "merchantCode",
            "senderMessageId"
          ],
          "properties": {
            "merchantCode": {
              "$ref": "#/definitions/merchantCode"
            },
            "senderMessageId": {
              "type": "string",
              "format": "MessageId",
              "description": "The sender message Id"
            }
          }
        }
      ]
    },
    "duplicateMerchantOfferOperationException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "description": "Duplicate operation on an offer has been {duplicateCount} times for the merchant '{merchantCode}':\n- sku: '{sku}' \n- gtin: '{gtin}'\n- itemCondition: '{itemCondition}' \n- fulfilledBy: '{fulfilledBy}'\n",
      "type": "object",
      "required": [
        "merchantCode",
        "sku",
        "gtin",
        "itemCondition",
        "fulfilledBy",
        "duplicateCount"
      ],
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "sku": {
          "$ref": "#/definitions/sku"
        },
        "gtin": {
          "$ref": "#/definitions/gtin"
        },
        "itemCondition": {
          "$ref": "#/definitions/itemCondition"
        },
        "fulfilledBy": {
          "$ref": "#/definitions/fulfilledBy"
        },
        "duplicateCount": {
          "type": "integer",
          "minimum": 2
        }
      }
    },
    "duplicateMerchantMarketplaceOfferOperationException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "description": "Duplicate operation on an offer has been {duplicateCount} times for the marketplace '{marketplaceCode}' and the merchant '{merchantCode}':\n- sku: '{sku}' \n- gtin: '{gtin}'\n- itemCondition: '{itemCondition}' \n- fulfilledBy: '{fulfilledBy}'\n",
      "type": "object",
      "required": [
        "marketplaceCode",
        "merchantCode",
        "sku",
        "gtin",
        "itemCondition",
        "fulfilledBy",
        "duplicateCount"
      ],
      "properties": {
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        },
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "sku": {
          "$ref": "#/definitions/sku"
        },
        "gtin": {
          "$ref": "#/definitions/gtin"
        },
        "itemCondition": {
          "$ref": "#/definitions/itemCondition"
        },
        "fulfilledBy": {
          "$ref": "#/definitions/fulfilledBy"
        },
        "duplicateCount": {
          "type": "integer",
          "minimum": 2
        }
      }
    },
    "batchMerchantMarketplaceOfferChanges": {
      "x-format": "Message",
      "type": "object",
      "description": "Contains all changes for one marketplace for one merchant",
      "properties": {
        "offers": {
          "type": "array",
          "description": "Offers that need to be created or replaced",
          "minItems": 1,
          "maxItems": 1000,
          "items": {
            "$ref": "#/definitions/merchantMarketplaceOffer"
          }
        },
        "deleted": {
          "type": "array",
          "minItems": 1,
          "maxItems": 1000,
          "description": "Deleted offers",
          "items": {
            "$ref": "#/definitions/merchantMarketplaceOfferIdentifier"
          }
        }
      }
    },
    "batchMerchantOfferChanges": {
      "x-format": "Message",
      "type": "object",
      "description": "Contains all changes for a merchant",
      "properties": {
        "offers": {
          "type": "array",
          "minItems": 1,
          "maxItems": 1000,
          "description": "Offers that need to be created or replaced",
          "items": {
            "$ref": "#/definitions/merchantOffer"
          }
        },
        "deleted": {
          "type": "array",
          "minItems": 1,
          "maxItems": 1000,
          "description": "Deleted offers",
          "items": {
            "$ref": "#/definitions/merchantOfferIdentifier"
          }
        }
      }
    },
    "price": {
      "x-exclude": true,
      "type": "number",
      "format": "decimal",
      "description": "The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes. http://schema.org/price"
    },
    "priceCurrency": {
      "type": "string",
      "description": "The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.\nUsage guidelines:\nUse the priceCurrency property (with ISO 4217 codes e.g. USD) instead of including ambiguous symbols such as $ in the value. http://schema.org/priceCurrency\n"
    },
    "validFrom": {
      "type": "string",
      "format": "date-time",
      "description": "The date when the item becomes valid. http://schema.org/validFrom"
    },
    "validThrough": {
      "type": "string",
      "format": "date-time",
      "description": "The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours. http://schema.org/validThrough"
    },
    "priceSpecification": {
      "type": "object",
      "properties": {
        "price": {
          "$ref": "#/definitions/price"
        },
        "validFrom": {
          "$ref": "#/definitions/validFrom"
        },
        "validThrough": {
          "$ref": "#/definitions/validThrough"
        }
      }
    },
    "minPrice": {
      "type": "number",
      "format": "decimal",
      "description": "The lowest price if the price is a range. http://schema.org/minPrice"
    },
    "deliveryLeadTime": {
      "type": "number",
      "format": "int16",
      "description": "The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup. http://schema.org/deliveryLeadTime"
    },
    "inventoryLevel": {
      "type": "number",
      "format": "decimal",
      "description": "The current approximate inventory level for the item or items. http://schema.org/inventoryLevel"
    },
    "fulfilledBy": {
      "type": "string",
      "description": "The marketplace in charge of the delivery on this offer."
    },
    "itemCondition": {
      "type": "string",
      "enum": [
        "NewCondition",
        "RefurbishedCondition",
        "UsedAsNewCondition",
        "UsedVeryGoodCondition",
        "UsedGoodCondition",
        "UsedAcceptableCondition"
      ]
    },
    "merchantOfferIdentifier": {
      "type": "object",
      "required": [
        "merchantCode",
        "sku",
        "gtin",
        "itemCondition"
      ],
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "sku": {
          "$ref": "#/definitions/sku"
        },
        "gtin": {
          "$ref": "#/definitions/gtin"
        },
        "itemCondition": {
          "$ref": "#/definitions/itemCondition"
        },
        "fulfilledBy": {
          "$ref": "#/definitions/fulfilledBy"
        }
      }
    },
    "merchantMarketplaceOfferIdentifier": {
      "allOf": [
        {
          "$ref": "#/definitions/merchantOfferIdentifier"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "marketplaceCode",
            "sku",
            "gtin",
            "itemCondition"
          ],
          "properties": {
            "marketplaceCode": {
              "$ref": "#/definitions/marketplaceCode"
            }
          }
        }
      ]
    },
    "merchantOfferList": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "merchantOffers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/merchantOffer"
              }
            }
          }
        }
      ]
    },
    "merchantOffer": {
      "allOf": [
        {
          "$ref": "#/definitions/merchantOfferIdentifier"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "sku",
            "gtin",
            "itemCondition",
            "price",
            "priceCurrency",
            "deliveryLeadTime",
            "inventoryLevel",
            "lastUpdateUtcDate"
          ],
          "properties": {
            "price": {
              "$ref": "#/definitions/price"
            },
            "priceCurrency": {
              "$ref": "#/definitions/priceCurrency"
            },
            "minPrice": {
              "$ref": "#/definitions/minPrice"
            },
            "discount": {
              "$ref": "#/definitions/priceSpecification"
            },
            "deliveryLeadTime": {
              "$ref": "#/definitions/deliveryLeadTime"
            },
            "inventoryLevel": {
              "$ref": "#/definitions/inventoryLevel"
            },
            "deliverySpecifications": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/deliverySpecification"
              }
            },
            "lastUpdateUtcDate": {
              "type": "string",
              "format": "date-time",
              "example": "2018-02-24T14:24:35"
            }
          }
        }
      ]
    },
    "merchantMarketplaceOffer": {
      "allOf": [
        {
          "$ref": "#/definitions/merchantOffer"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "marketplaceCode",
            "sku",
            "gtin",
            "itemCondition",
            "price",
            "priceCurrency",
            "deliveryLeadTime",
            "inventoryLevel",
            "lastUpdateUtcDate"
          ],
          "properties": {
            "marketplaceCode": {
              "$ref": "#/definitions/marketplaceCode"
            }
          }
        }
      ]
    },
    "deliveryMethod": {
      "type": "string",
      "description": "A delivery method is a standardized procedure for transferring the product or service to the destination of fulfillment chosen by the customer. Delivery methods are characterized by the means of transportation used, and by the organization or group that is the contracting party for the sending organization or person."
    },
    "transportTime": {
      "type": "number",
      "format": "int16",
      "description": "To compute the shipping time, we sometimes ask for the typical delay from the moment the goods are either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup. http://schema.org/deliveryLeadTime\n"
    },
    "deliverySpecification": {
      "type": "object",
      "properties": {
        "deliveryMethod": {
          "$ref": "#/definitions/deliveryMethod"
        },
        "price": {
          "$ref": "#/definitions/price"
        },
        "additionalPrice": {
          "$ref": "#/definitions/price"
        },
        "transportTime": {
          "$ref": "#/definitions/transportTime"
        }
      }
    },
    "merchantOfferNoneImportationReasonCode": {
      "type": "string",
      "description": "A reason code related",
      "enum": [
        "InvalidEAN",
        "InvariantNotAppliable"
      ]
    },
    "merchantOfferNoneImportationReason": {
      "type": "object",
      "properties": {
        "code": {
          "$ref": "#/definitions/merchantOfferNoneImportationReasonCode"
        },
        "error": {
          "$ref": "#/definitions/userErrorMessage"
        },
        "propertyName": {
          "type": "string",
          "description": "The related property name causing the none importation of the offer"
        },
        "actualValue": {
          "type": "string",
          "description": "The actual value causing the none importation of the offer"
        }
      }
    },
    "merchantEventPushed": {
      "x-exclude": true,
      "type": "object",
      "discriminator": "eventType",
      "required": [
        "merchantCode",
        "eventType"
      ],
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "eventType": {
          "x-exclude": true,
          "type": "string"
        }
      }
    },
    "merchantCreated": {
      "x-format": "Event",
      "type": "object",
      "description": "When the merchant creates his account on IMN",
      "required": [
        "merchantCode",
        "userId",
        "email"
      ],
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "userId": {
          "$ref": "#/definitions/userId"
        },
        "email": {
          "$ref": "#/definitions/email"
        }
      }
    },
    "merchantAcountInfoUpdated": {
      "x-format": "Event",
      "description": "When the merchant updates his account information",
      "type": "object",
      "required": [
        "merchantCode",
        "userId",
        "companyName",
        "lastName",
        "firstName",
        "country",
        "phoneNumber",
        "currencyCode"
      ],
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "userId": {
          "$ref": "#/definitions/userId"
        },
        "companyName": {
          "$ref": "#/definitions/merchantCompanyName"
        },
        "lastName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "country": {
          "$ref": "#/definitions/countryIsoCodeAlpha3"
        },
        "phoneNumber": {
          "type": "string"
        },
        "imageUrl": {
          "$ref": "#/definitions/httpUrl"
        },
        "currencyCode": {
          "$ref": "#/definitions/currencyCode"
        },
        "ecommerceSoftwareName": {
          "$ref": "#/definitions/ecommerceSoftwareName"
        }
      }
    },
    "merchantMarketplaceEventBase": {
      "x-exclude": true,
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "type": "object",
          "required": [
            "marketplaceCode"
          ],
          "properties": {
            "marketplaceCode": {
              "$ref": "#/definitions/marketplaceCode"
            }
          }
        }
      ]
    },
    "merchantMarketplaceCredentialConfigured": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode",
            "credential"
          ],
          "properties": {
            "credential": {
              "$ref": "#/definitions/marketplaceApiCredential"
            },
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "merchantMarketplaceSubscriptionRequested": {
      "x-format": "Event",
      "description": "When the merchant marketplace subscription has been requested",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "externalId": {
              "type": "string",
              "description": "If the request is coming from an external system we will keep the identifier"
            }
          }
        }
      ]
    },
    "merchantMarketplaceSubscriptionAccepted": {
      "x-format": "Event",
      "description": "When the marketplace accept the mechant subscription request",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "merchantMarketplaceSubscriptionRefused": {
      "x-format": "Event",
      "description": "When the marketplace refuses the merchant subscription",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode",
            "reason"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "reason": {
              "$ref": "#/definitions/merchantMarketplaceSubscriptionRefusalReason"
            }
          }
        }
      ]
    },
    "merchantMarketplaceSubscriptionBlocked": {
      "x-format": "Event",
      "description": "When the marketplace blocks the merchant subscription",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode",
            "reason"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "reason": {
              "$ref": "#/definitions/merchantMarketplaceSubscriptionRefusalReason"
            }
          }
        }
      ]
    },
    "merchantOffersSourceMarketplaceDeclared": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "merchantOffersSourceMarketplaceUndeclared": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "merchantMarketplaceOfferImportationEnabled": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "merchantMarketplaceOfferImportationDisabled": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "merchantMarketplaceOfferPublicationEnabled": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "merchantMarketplaceOfferPublicationDisabled": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "merchantMarketplaceOrderImportationEnabled": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "merchantMarketplaceOrderImportationDisabled": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "externalMerchantMarketplaceSubscriptionsRequested": {
      "x-format": "Event",
      "type": "object",
      "description": "When the merchant marketplace subscription has been requested",
      "required": [
        "merchantCode",
        "userId",
        "targetMarketplacesSubscriptionRequested",
        "subscriptionRequestUtcDate",
        "salesforceSubscriptionId"
      ],
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "userId": {
          "$ref": "#/definitions/userId"
        },
        "targetMarketplacesSubscriptionRequested": {
          "type": "array",
          "minItems": 1,
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/marketplaceCode"
          }
        },
        "subscriptionRequestUtcDate": {
          "type": "string",
          "format": "date-time",
          "description": "The exact date time of the subscription request"
        },
        "salesforceSubscriptionId": {
          "type": "string",
          "description": "The Salesforce identifier of the subscription",
          "example": "BLA0O00001v8aNuQAI"
        }
      }
    },
    "merchantMarketplacePricingSettingConfigured": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode",
            "ruleType"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "ruleType": {
              "$ref": "#/definitions/marketplacePricingRuleType"
            },
            "value": {
              "$ref": "#/definitions/marketplacePricingValue"
            }
          }
        }
      ]
    },
    "merchantMarketplaceShippingPreprationSettingConfigured": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode",
            "preparationRuleType"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "preparationRuleType": {
              "$ref": "#/definitions/marketplacePreparationRuleType"
            },
            "preparationDelay": {
              "type": "number",
              "format": "int32",
              "description": "The delay considering the rule"
            }
          }
        }
      ]
    },
    "merchantMarketplaceShippingDeliverySettingConfigured": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode",
            "deliveryMode",
            "ruleType"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "deliveryMode": {
              "$ref": "#/definitions/deliveryMode"
            },
            "ruleType": {
              "$ref": "#/definitions/marketplaceShippingChargeRuleType"
            },
            "charge": {
              "type": "number",
              "example": 3.35,
              "description": "The charge for this delivery mode considering the rule"
            },
            "additionalCharge": {
              "type": "number",
              "example": 1.52,
              "description": "The additional charge for this delivery mode"
            }
          }
        }
      ]
    },
    "merchantMarketplaceShippingDeliverySettingDisabled": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "merchantMarketplaceShippingDeliverySettingDeleted": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "merchantMarketplaceShippingDeliverySettingEnabled": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "marketplaceMerchantCodeConfigured": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode",
            "marketplaceMerchantCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "marketplaceMerchantCode": {
              "$ref": "#/definitions/marketplaceMerchantCode"
            }
          }
        }
      ]
    },
    "createMerchant": {
      "x-format": "Command",
      "description": "When the merchant creates his account on IMN",
      "type": "object",
      "required": [
        "merchantCode",
        "userId",
        "companyName",
        "email",
        "lastName",
        "firstName",
        "country",
        "phoneNumber",
        "currencyCode",
        "ecommerceSoftwareName"
      ],
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "userId": {
          "$ref": "#/definitions/userId"
        },
        "companyName": {
          "$ref": "#/definitions/merchantCompanyName"
        },
        "email": {
          "$ref": "#/definitions/email"
        },
        "lastName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "country": {
          "$ref": "#/definitions/countryIsoCodeAlpha3"
        },
        "phoneNumber": {
          "type": "string"
        },
        "imageUrl": {
          "$ref": "#/definitions/httpUrl"
        },
        "currencyCode": {
          "$ref": "#/definitions/currencyCode"
        },
        "ecommerceSoftwareName": {
          "$ref": "#/definitions/ecommerceSoftwareName"
        }
      }
    },
    "updateMerchantAcountInfo": {
      "x-format": "Command",
      "description": "When the merchant updates his account information",
      "type": "object",
      "required": [
        "merchantCode",
        "userId",
        "companyName",
        "lastName",
        "firstName",
        "country",
        "phoneNumber",
        "currencyCode",
        "ecommerceSoftwareName"
      ],
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "userId": {
          "$ref": "#/definitions/userId"
        },
        "companyName": {
          "$ref": "#/definitions/merchantCompanyName"
        },
        "lastName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "country": {
          "$ref": "#/definitions/countryIsoCodeAlpha3"
        },
        "phoneNumber": {
          "type": "string"
        },
        "imageUrl": {
          "$ref": "#/definitions/httpUrl"
        },
        "currencyCode": {
          "$ref": "#/definitions/currencyCode"
        },
        "ecommerceSoftwareName": {
          "$ref": "#/definitions/ecommerceSoftwareName"
        }
      }
    },
    "declareMerchantOffersSourceMarketplace": {
      "x-format": "Command",
      "description": "When the merchant wants to declare this marketplace as offers's source",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "undeclareMerchantOffersSourceMarketplace": {
      "x-format": "Command",
      "description": "When the merchant wants to undeclare this marketplace as offers's source",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "acceptMerchantMarketplaceSubscription": {
      "x-format": "Command",
      "description": "When the marketplace configures credential and accepts the merchant subscription",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "refuseMerchantMarketplaceSubscription": {
      "x-format": "Command",
      "description": "When the marketplace refuses the merchant subscription",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode",
            "reason"
          ],
          "properties": {
            "reason": {
              "$ref": "#/definitions/merchantMarketplaceSubscriptionRefusalReason"
            },
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "blockMerchantMarketplaceSubscription": {
      "x-format": "Command",
      "description": "When the marketplace blocks the merchant subscription",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode",
            "reason"
          ],
          "properties": {
            "reason": {
              "$ref": "#/definitions/merchantMarketplaceSubscriptionRefusalReason"
            },
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "configureMerchantMarketplaceCredential": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode",
            "credential"
          ],
          "properties": {
            "credential": {
              "$ref": "#/definitions/marketplaceApiCredential"
            },
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "enableMerchantMarketplace": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "disableMerchantMarketplace": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "reenableMerchantMarketplaceOrderImportation": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "disableMerchantMarketplaceOrderImportation": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            }
          }
        }
      ]
    },
    "configureMarketplacePricingSetting": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode",
            "pricingSetting"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "pricingSetting": {
              "$ref": "#/definitions/marketplacePricingSetting"
            }
          }
        }
      ]
    },
    "configureMarketplaceShippingSettings": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode",
            "shippingSettings"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "shippingSettings": {
              "$ref": "#/definitions/marketplaceShippingSettings"
            }
          }
        }
      ]
    },
    "configureMarketplaceMerchantCode": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode",
            "marketplaceMerchantCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "marketplaceMerchantCode": {
              "$ref": "#/definitions/marketplaceMerchantCode"
            }
          }
        }
      ]
    },
    "merchantCodeAlreadyUsedException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "type": "object",
      "required": [
        "merchantCode"
      ],
      "description": "The merchant code '{merchantCode}' already exists\n",
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        }
      }
    },
    "invalidMarketplaceCredentialException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "type": "object",
      "required": [
        "marketplaceApiCredential"
      ],
      "description": "Marketplace credentials are not recognized, please check them and try again\n",
      "properties": {
        "marketplaceApiCredential": {
          "$ref": "#/definitions/marketplaceApiCredential"
        }
      }
    },
    "subscriptionNotAcceptedException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "type": "object",
      "required": [
        "marketplaceCode"
      ],
      "description": "The subscription has not yet been accepted by the marketplace '{marketplaceCode}'\n",
      "properties": {
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        }
      }
    },
    "notOfferSourceMarketplaceException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "type": "object",
      "required": [
        "marketplaceCode"
      ],
      "description": "The marketplace '{marketplaceCode}' is not the offer source\n",
      "properties": {
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        }
      }
    },
    "credentialNotConfiguredException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "type": "object",
      "required": [
        "marketplaceCode"
      ],
      "description": "The credential are not configured for the marketplace '{marketplaceCode}'\n",
      "properties": {
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        }
      }
    },
    "partnerHttpException": {
      "x-exclude": true,
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": true,
      "type": "object",
      "required": [
        "correlationId",
        "marketplaceCode",
        "merchantCode",
        "logUri",
        "httpStatus",
        "operationName"
      ],
      "description": "The partner http request is in error\n",
      "properties": {
        "correlationId": {
          "$ref": "#/definitions/correlationId"
        },
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        },
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "logUri": {
          "type": "string",
          "format": "uri"
        },
        "httpStatus": {
          "type": "string",
          "format": "httpStatusCode"
        },
        "operationName": {
          "type": "string"
        }
      }
    },
    "partnerInvalidResponse": {
      "x-exclude": true,
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": true,
      "type": "object",
      "required": [
        "correlationId",
        "marketplaceCode",
        "merchantCode",
        "exceptionMessage",
        "operationName"
      ],
      "description": "The partner http response is invalid\n",
      "properties": {
        "correlationId": {
          "$ref": "#/definitions/correlationId"
        },
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        },
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "exceptionMessage": {
          "type": "string"
        },
        "operationName": {
          "type": "string"
        }
      }
    },
    "marketplaceSubscriptionStatus": {
      "description": "The subscription status",
      "type": "string",
      "enum": [
        "notRequested",
        "requested",
        "accepted",
        "declined",
        "blocked"
      ],
      "example": "accepted"
    },
    "merchantMarketplaceSubscriptionRefusalReason": {
      "type": "string",
      "minLength": 5,
      "x-minLength": 5,
      "maxLength": 4000,
      "x-maxLength": 4000,
      "description": "The marketplace reason for the subscription's refusal"
    },
    "merchantCompanyName": {
      "type": "string",
      "minLength": 2,
      "x-minLength": 2,
      "maxLength": 100,
      "x-maxLength": 100,
      "description": "Merchant's company name"
    },
    "marketplaceCredentialStatus": {
      "description": "The marketplace credential status",
      "type": "string",
      "enum": [
        "notConfigured",
        "configured",
        "expired"
      ],
      "example": "configured"
    },
    "marketplaceShippingSettingsStatus": {
      "description": "The marketplace shipping settings status",
      "type": "string",
      "enum": [
        "notConfigured",
        "configured"
      ]
    },
    "marketplacePreparationRuleType": {
      "type": "string",
      "enum": [
        "Increase",
        "Decrease",
        "Same"
      ],
      "default": "Same",
      "example": "Same"
    },
    "marketplacePreparationSetting": {
      "type": "object",
      "required": [
        "preparationRuleType"
      ],
      "properties": {
        "preparationRuleType": {
          "$ref": "#/definitions/marketplacePreparationRuleType"
        },
        "preparationDelay": {
          "type": "number",
          "format": "int32",
          "description": "The delay considering the rule"
        }
      }
    },
    "marketplaceShippingSettings": {
      "type": "object",
      "required": [
        "preparationSetting",
        "deliverySettings"
      ],
      "properties": {
        "preparationSetting": {
          "$ref": "#/definitions/marketplacePreparationSetting"
        },
        "deliverySettings": {
          "$ref": "#/definitions/marketplaceDeliverySettingList"
        }
      }
    },
    "deliveryMode": {
      "type": "string",
      "example": "Standard",
      "x-lov": "DeliveryMode"
    },
    "marketplaceDeliverySettingList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/marketplaceDeliverySetting"
      }
    },
    "marketplaceDeliverySetting": {
      "type": "object",
      "required": [
        "deliveryMode",
        "ruleType"
      ],
      "properties": {
        "deliveryMode": {
          "$ref": "#/definitions/deliveryMode"
        },
        "ruleType": {
          "$ref": "#/definitions/marketplaceShippingChargeRuleType"
        },
        "charge": {
          "type": "number",
          "example": 3.35,
          "description": "The charge for this delivery mode considering the rule"
        },
        "additionalCharge": {
          "type": "number",
          "example": 1.52,
          "description": "The additional charge for this delivery mode"
        }
      }
    },
    "marketplacePricingValue": {
      "type": "number",
      "pattern": "^([0-9]{1,13}[.]*[0-9]{0,6})$",
      "x-pattern": "^([0-9]{1,13}[.]*[0-9]{0,6})$",
      "example": 42.01
    },
    "marketplacePricingSetting": {
      "type": "object",
      "required": [
        "ruleType"
      ],
      "properties": {
        "ruleType": {
          "$ref": "#/definitions/marketplacePricingRuleType"
        },
        "value": {
          "$ref": "#/definitions/marketplacePricingValue"
        }
      }
    },
    "marketplacePricingRuleOperationType": {
      "type": "string",
      "enum": [
        "plus",
        "minus"
      ],
      "example": "plus"
    },
    "marketplacePricingRuleUnit": {
      "type": "string",
      "enum": [
        "percent",
        "amount"
      ],
      "example": "percent"
    },
    "marketplacePricingRuleType": {
      "type": "string",
      "default": "Same",
      "enum": [
        "PercentIncrease",
        "PercentDecrease",
        "AmountIncrease",
        "AmountDecrease",
        "Same"
      ]
    },
    "marketplaceShippingChargeRuleType": {
      "type": "string",
      "default": "SamePricing",
      "enum": [
        "PercentIncrease",
        "PercentDecrease",
        "AmountIncrease",
        "AmountDecrease",
        "Same",
        "FixedAmount"
      ]
    },
    "marketplaceInfo": {
      "type": "object",
      "required": [
        "code",
        "name",
        "sellerBackOfficeUrl",
        "sellerBackOfficeCredentialPageUrl",
        "imageUrl",
        "subscriptionStatus",
        "credentialStatus",
        "shippingSettingsStatus",
        "source"
      ],
      "properties": {
        "code": {
          "$ref": "#/definitions/marketplaceCode"
        },
        "name": {
          "type": "string",
          "description": "The name of the marketplace",
          "example": "Cdiscount"
        },
        "sellerBackOfficeUrl": {
          "$ref": "#/definitions/httpUrl"
        },
        "sellerBackOfficeCredentialPageUrl": {
          "$ref": "#/definitions/httpUrl"
        },
        "imageUrl": {
          "$ref": "#/definitions/httpUrl"
        },
        "subscriptionStatus": {
          "$ref": "#/definitions/marketplaceSubscriptionStatus"
        },
        "credentialStatus": {
          "$ref": "#/definitions/marketplaceCredentialStatus"
        },
        "shippingSettingsStatus": {
          "$ref": "#/definitions/marketplaceShippingSettingsStatus"
        },
        "source": {
          "type": "boolean",
          "description": "If true, this marketplace is the source of offers",
          "default": false,
          "example": false
        }
      }
    },
    "marketplaceSubscriptionReporting": {
      "type": "object",
      "required": [
        "status",
        "messages"
      ],
      "properties": {
        "status": {
          "$ref": "#/definitions/marketplaceSubscriptionStatus"
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/marketplaceSubscriptionMessage"
          }
        }
      }
    },
    "marketplaceSubscriptionMessage": {
      "type": "object",
      "required": [
        "senderType",
        "utcDate",
        "status"
      ],
      "properties": {
        "senderType": {
          "$ref": "#/definitions/marketplaceSubscriptionMessageSenderType"
        },
        "utcDate": {
          "type": "string",
          "format": "date-time",
          "example": "2009-06-15T13:45:30Z"
        },
        "status": {
          "$ref": "#/definitions/marketplaceSubscriptionStatus"
        },
        "message": {
          "type": "string",
          "example": "Wrong shoes!"
        }
      }
    },
    "marketplaceSubscriptionMessageSenderType": {
      "type": "string",
      "enum": [
        "merchant",
        "marketplace"
      ],
      "example": "marketplace"
    },
    "marketplaceOfferPublicationStatus": {
      "description": "The Offer Importation status",
      "type": "string",
      "enum": [
        "disabled",
        "enabled"
      ],
      "example": "enabled"
    },
    "merchantEvents": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/merchantEvent"
      }
    },
    "merchantEvent": {
      "type": "object",
      "properties": {
        "eventType": {
          "type": "string"
        },
        "eventContent": {
          "type": "object"
        }
      }
    },
    "marketplaceApiIntegrationStatus": {
      "type": "string",
      "enum": [
        "up",
        "down",
        "paused"
      ]
    },
    "marketplaceStatus": {
      "type": "string",
      "description": "Indicate the status of the marketplace",
      "enum": [
        "PROD",
        "TEST"
      ]
    },
    "beezUPExecutionId": {
      "description": "The execution identifier",
      "format": "uuid",
      "type": "string",
      "example": "8D4176FA78D5A7Fffa91e9edc694ec5858be9a1b109507c"
    },
    "beezUPChannelId": {
      "type": "string",
      "format": "guid",
      "description": "The channel identifier",
      "example": "2dc136a7-0d3d-4cc9-a825-a28a42c53e28"
    },
    "beezUPChannelCatalogId": {
      "type": "string",
      "format": "guid",
      "description": "The channel catalog identifier",
      "example": "6d6b04de-406b-4539-8e7e-bf3e8da5dfb0"
    },
    "beezUPMarketplaceTechnicalCode": {
      "description": "The technical code of the marketplace",
      "type": "string",
      "example": "CDiscount",
      "x-lov": "OMMarketplaceTechnicalCode"
    },
    "beezUPMarketplaceAccountId": {
      "description": "The marketplace account identifier in BeezUP. This account identifier is based on your api settings.",
      "type": "integer",
      "format": "int32",
      "example": 1234
    },
    "beezUPMarketplaceAccountIdentifier": {
      "type": "object",
      "required": [
        "channelId",
        "channelCatalogId",
        "accountId"
      ],
      "properties": {
        "channelId": {
          "$ref": "#/definitions/beezUPChannelId"
        },
        "channelCatalogId": {
          "$ref": "#/definitions/beezUPChannelCatalogId"
        },
        "accountId": {
          "$ref": "#/definitions/beezUPMarketplaceAccountId"
        }
      }
    },
    "marketplaceCodeNotFoundException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "type": "object",
      "required": [
        "marketplaceCode"
      ],
      "description": "The marketplace code '{marketplaceCode}' does not exist\n",
      "properties": {
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        }
      }
    },
    "merchantCodeNotFoundException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "type": "object",
      "required": [
        "merchantCode"
      ],
      "description": "The merchant code '{merchantCode}' does not exist\n",
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        }
      }
    },
    "invalidMarketplaceCodeException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "type": "object",
      "required": [
        "marketplaceCode"
      ],
      "description": "The merketplace code '{marketplaceCode}' is different from the state\n",
      "properties": {
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        }
      }
    },
    "invalidMerchantCodeException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "type": "object",
      "required": [
        "merchantCode"
      ],
      "description": "The merchant code '{merchantCode}' is different from the state\n",
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        }
      }
    },
    "ecommerceSoftwareName": {
      "description": "The e-commerce software name of the merchant",
      "type": "string",
      "example": "Prestashop"
    },
    "firstName": {
      "type": "string",
      "description": "The first name of a person",
      "example": "Marilyne"
    },
    "lastName": {
      "type": "string",
      "description": "The last name of a person",
      "example": "Monroe"
    },
    "correlationId": {
      "x-exclude": true,
      "description": "The correlation identifier. It's a guid.",
      "format": "CorrelationId",
      "type": "string",
      "example": "b0d3faea-f881-439f-ba92-02b1168511ea"
    },
    "messageId": {
      "x-exclude": true,
      "description": "The message identifier. It's a guid.",
      "format": "MessageId",
      "type": "string",
      "example": "b0d3faea-f881-439f-ba92-02b1168511ea"
    },
    "causeId": {
      "x-exclude": true,
      "description": "The cause identifier. It's a guid.",
      "format": "CauseId",
      "type": "string",
      "example": "b0d3faea-f881-439f-ba92-02b1168511ea"
    },
    "merchantCode": {
      "type": "string",
      "description": "The merchant code identifier in IMN",
      "pattern": "^([A-Z|0-9]){5}$",
      "x-pattern": "^([A-Z|0-9]){5}$",
      "example": "MLT01"
    },
    "marketplaceCode": {
      "type": "string",
      "description": "The marketplace code identifier in IMN.\nFor now we have:\n- C1 for Cdiscount\n- E1 for ePrice\n- R1 for Real.DE\n- B1 for BOL\n- E2 for eMAG\n",
      "pattern": "^([A-Z]|[0-9]){2}$",
      "x-pattern": "^([A-Z]|[0-9]){2}$",
      "example": "C1"
    },
    "marketplaceMerchantCode": {
      "type": "string",
      "description": "The merchant code for a marketplace",
      "example": "005145"
    },
    "paginationRequestParameters": {
      "type": "object",
      "properties": {
        "pageSize": {
          "$ref": "#/definitions/pageSize"
        },
        "pageNumber": {
          "$ref": "#/definitions/pageNumber"
        }
      }
    },
    "pageSize": {
      "x-exclude": true,
      "description": "Indicate the item count per page",
      "type": "integer",
      "format": "int32",
      "default": 100,
      "minimum": 25,
      "x-minimum": 25,
      "maximum": 100,
      "x-maximum": 100,
      "example": 100
    },
    "pageNumber": {
      "x-exclude": true,
      "description": "Indicates the page number",
      "format": "int32",
      "type": "integer",
      "example": 1,
      "minimum": 1,
      "x-minimum": 1,
      "default": 1
    },
    "catalogCategoryFilter": {
      "type": "object",
      "properties": {
        "categoryPath": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Indicates on which catalog category path you want to make the filter",
          "example": [
            "Maison",
            "Chambre"
          ]
        }
      }
    },
    "channelCategoryFilter": {
      "type": "object",
      "properties": {
        "categoryPath": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Indicates on which channel category path you want to make the filter",
          "example": [
            "Home",
            "Bedroom"
          ]
        }
      }
    },
    "productFilters": {
      "type": "object",
      "properties": {
        "sku": {
          "type": "string",
          "description": "The product sku filter",
          "example": "M1234"
        },
        "title": {
          "type": "string",
          "description": "The product title filter",
          "example": "RefrigÃ©rateur"
        },
        "additionalProductFilters": {
          "$ref": "#/definitions/additionalProductFilters"
        }
      }
    },
    "additionalProductFiltersValue": {
      "type": "object",
      "properties": {
        "operatorName": {
          "$ref": "#/definitions/productFilterOperatorName"
        },
        "values": {
          "description": "Must be null if the operator is \"IsNull\" or \"IsNotNull\".\nCan contains multiple value in case of \"InList\" operator. Otherwise a single value is expected.\n",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "My value"
          ]
        }
      },
      "example": {
        "672644c7-5bd0-4e25-88c1-1f732bda5e4c": {
          "operatorName": "GreaterTo",
          "values": [
            100
          ]
        }
      }
    },
    "additionalProductFilters": {
      "type": "object",
      "description": "Describe a filter on a product's column.\nThe key is the column identifier of your catalog or a custom column.\n",
      "additionalProperties": {
        "$ref": "#/definitions/additionalProductFiltersValue"
      }
    },
    "productFilterOperatorName": {
      "type": "string",
      "description": "Indicate the operator you want to make on the columnId",
      "enum": [
        "Equals",
        "Contains",
        "GreaterTo",
        "LowerTo",
        "InList",
        "IsNull",
        "IsNotNull"
      ]
    },
    "sku": {
      "type": "string",
      "description": "The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers. http://schema.org/sku",
      "maxLength": 50
    },
    "gtin": {
      "type": "string",
      "description": "Global Trade Item Number (GTIN) of the item.\nSupported values:\n\n- UPC (in North America / GTIN-12)\n12-digit number like 323456789012\n8-digit UPC-E codes should be converted to 12-digit codes\n- EAN (in Europe / GTIN-13)\n13-digit number like 3001234567892\n- JAN (in Japan / GTIN-13)\n8 or 13-digit number like 49123456 or 4901234567894\n- ISBN (for books)\n10 or 13-digit number like 1455582344 or 978-1455582341. If you have both, only include the 13-digit number. ISBN-10 are deprecated and should be converted to ISBN-13\n- ITF-14 (for multipacks / GTIN-14)\n14-digit number like 10856435001702\n\nSchema.org property:\n- [Offer.gtin8](http://schema.org/gtin8)\n- [Offer.gtin12](http://schema.org/gtin12)\n- [Offer.gtin13](http://schema.org/gtin13)\n- [Offer.gtin14](http://schema.org/gtin14)\n- [Offer.isbn](http://schema.org/isbn)\n",
      "maxLength": 50
    },
    "productBasicInfo": {
      "description": "The basic information related to a product",
      "type": "object",
      "required": [
        "productId",
        "productSku",
        "productTitle",
        "productImageUrl",
        "productExists"
      ],
      "properties": {
        "productId": {
          "format": "guid",
          "type": "string",
          "description": "The product identifier",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "productSku": {
          "type": "string",
          "description": "The product SKU",
          "example": "SKU1234"
        },
        "productTitle": {
          "type": "string",
          "description": "The product tile",
          "example": "My supert product"
        },
        "productImageUrl": {
          "type": "string",
          "format": "HttpUrl",
          "description": "The product image Url",
          "example": "http://i2.cdscdn.com/pdt2/3/9/0/1/550x550/hai6901018043390/rw/haier-b20fwrss-refrigerateur-americain.jpg"
        },
        "productExists": {
          "type": "boolean",
          "description": "Indicates if the product still exists in your catalog",
          "example": true
        }
      }
    },
    "countryIsoCodeAlpha3": {
      "description": "The country iso code alpha 3 <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3\">(ISO 3166-1_alpha-3)</a>",
      "type": "string",
      "pattern": "^[A-Z]{3}$",
      "x-pattern": "^[A-Z]{3}$",
      "x-lov": "Country",
      "example": "FRA"
    },
    "currencyCode": {
      "x-exclude": true,
      "description": "The currency code <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">(ISO 4217)</a>\n",
      "type": "string",
      "pattern": "^[A-Z]{3}$",
      "x-pattern": "^[A-Z]{3}$",
      "example": "EUR"
    },
    "email": {
      "x-exclude": true,
      "description": "The email",
      "type": "string",
      "format": "email",
      "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
      "x-pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
      "example": "paulsimon@mysupercompany.com"
    },
    "userId": {
      "x-exclude": true,
      "format": "guid",
      "description": "The user identifier",
      "type": "string",
      "example": "8a7fbdec-9e71-472e-9974-27d5c1d57cf8"
    },
    "productId": {
      "type": "string",
      "format": "guid",
      "description": "The product identifier",
      "example": "578419df-1bbf-41a6-96fa-862e42182b67"
    },
    "listOfValueItem": {
      "description": "This object is used by LOV apis",
      "type": "object",
      "required": [
        "codeIdentifier",
        "intIdentifier"
      ],
      "properties": {
        "position": {
          "format": "int32",
          "type": "integer",
          "example": 1
        },
        "codeIdentifier": {
          "type": "string",
          "example": "FRA"
        },
        "translationText": {
          "type": "string",
          "example": "France"
        },
        "intIdentifier": {
          "format": "int32",
          "type": "integer",
          "example": 1
        }
      }
    },
    "paginationResult": {
      "x-exclude": true,
      "type": "object",
      "required": [
        "entryCount",
        "pageCount",
        "totalEntryCount",
        "links"
      ],
      "properties": {
        "entryCount": {
          "type": "integer",
          "description": "The entry count currently returned",
          "example": 25,
          "minimum": 0
        },
        "pageCount": {
          "type": "integer",
          "description": "The page count",
          "example": 38,
          "minimum": 0
        },
        "totalEntryCount": {
          "type": "integer",
          "description": "The total entry count",
          "example": 943,
          "minimum": 0
        },
        "links": {
          "$ref": "#/definitions/paginationResultLinks"
        }
      },
      "example": {
        "entryCount": 25,
        "pageCount": 38,
        "totalEntryCount": 943,
        "links": {
          "first": {
            "href": "/merchant/orders/v1/list/full",
            "method": "POST",
            "parameters": [
              {
                "name": "request",
                "in": "body",
                "type": "object",
                "schema": "orderListRequest",
                "value": {
                  "beginPeriodUtcDate": "2014-08-25T07:32:31.584Z",
                  "endPeriodUtcDate": "2014-09-24T07:32:31.584Z",
                  "pageSize": 25,
                  "pageNumber": 1
                }
              }
            ]
          },
          "last": {
            "href": "/merchant/orders/v1/list/full",
            "method": "POST",
            "parameters": [
              {
                "name": "request",
                "in": "body",
                "type": "object",
                "schema": "orderListRequest",
                "value": {
                  "beginPeriodUtcDate": "2014-08-25T07:32:31.584Z",
                  "endPeriodUtcDate": "2014-09-24T07:32:31.584Z",
                  "pageSize": 25,
                  "pageNumber": 38
                }
              }
            ]
          },
          "next": {
            "href": "/merchant/orders/v1/list/full",
            "method": "POST",
            "parameters": [
              {
                "name": "request",
                "in": "body",
                "type": "object",
                "schema": "orderListRequest",
                "value": {
                  "beginPeriodUtcDate": "2014-08-25T07:32:31.584Z",
                  "endPeriodUtcDate": "2014-09-24T07:32:31.584Z",
                  "pageSize": 25,
                  "pageNumber": 2
                }
              }
            ]
          }
        }
      }
    },
    "paginationResultLinks": {
      "x-exclude": true,
      "description": "The navigation links 'first', 'last', 'next', 'previous'",
      "type": "object",
      "required": [
        "first",
        "last"
      ],
      "properties": {
        "first": {
          "$ref": "#/definitions/link3"
        },
        "last": {
          "$ref": "#/definitions/link3"
        },
        "previous": {
          "$ref": "#/definitions/link3"
        },
        "next": {
          "$ref": "#/definitions/link3"
        }
      }
    },
    "href": {
      "x-exclude": true,
      "type": "string",
      "example": "/merchant/orders/v1/{marketplaceCode}/{IMNOrderId}",
      "description": "Indicate the relative uri for this link"
    },
    "operationId": {
      "x-exclude": true,
      "type": "string",
      "description": "The operationId to call.",
      "example": "GetOrder"
    },
    "httpMethod": {
      "x-exclude": true,
      "type": "string",
      "enum": [
        "GET",
        "POST",
        "PATCH",
        "DELETE",
        "PUT",
        "HEAD"
      ],
      "default": "GET",
      "example": "GET",
      "description": "Indicate the http method to use on this link"
    },
    "link3": {
      "x-exclude": true,
      "type": "object",
      "required": [
        "href"
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "The label corresponding to the link. This label is automatically translated based on the Accept-Language http header.",
          "example": "The translated label"
        },
        "docUrl": {
          "$ref": "#/definitions/docUrl"
        },
        "description": {
          "type": "string",
          "description": "The description of the link",
          "example": "This is a description link"
        },
        "href": {
          "$ref": "#/definitions/href"
        },
        "operationId": {
          "$ref": "#/definitions/operationId"
        },
        "method": {
          "$ref": "#/definitions/httpMethod"
        },
        "parameters": {
          "$ref": "#/definitions/linkParameter3Types"
        },
        "urlTemplated": {
          "type": "boolean",
          "description": "indicates whether the href is templated or not"
        },
        "allRequiredParamsProvided": {
          "type": "boolean",
          "description": "indicates whether all required params have been provided"
        },
        "allOptionalParamsProvided": {
          "type": "boolean",
          "description": "indicates whether all optionals params have been provided"
        },
        "info": {
          "$ref": "#/definitions/infoSummaries"
        }
      }
    },
    "linkParameter3Types": {
      "x-exclude": true,
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/linkParameter3"
      }
    },
    "linkParameter2Types": {
      "x-exclude": true,
      "type": "array",
      "uniqueItems": true,
      "minItems": 0,
      "items": {
        "$ref": "#/definitions/linkParameter2"
      }
    },
    "link2": {
      "x-exclude": true,
      "type": "object",
      "x-deprecated": true,
      "required": [
        "rel"
      ],
      "properties": {
        "rel": {
          "type": "string",
          "description": "Indicate the relation name related to the link",
          "example": "self"
        },
        "href": {
          "$ref": "#/definitions/href"
        },
        "operationId": {
          "$ref": "#/definitions/operationId"
        },
        "method": {
          "$ref": "#/definitions/httpMethod"
        },
        "parameters": {
          "$ref": "#/definitions/linkParameter2Types"
        },
        "info": {
          "$ref": "#/definitions/infoSummaries"
        }
      }
    },
    "parameterIn": {
      "x-exclude": true,
      "type": "string",
      "description": "* path: if the parameter must be pass in the path uri\n* header: if the parameter must be passed in http header\n* query: if the parameter must be passed in querystring\n* body: if the parameter must be passed in the body\n* file: if the parameter must be passed in a multipart/form-data (https://swagger.io/docs/specification/2-0/file-upload/)\n",
      "example": "path",
      "enum": [
        "path",
        "header",
        "query",
        "body",
        "file"
      ]
    },
    "parameterType": {
      "x-exclude": true,
      "description": "The value type of the parameter",
      "type": "string",
      "enum": [
        "string",
        "integer",
        "number",
        "boolean",
        "object",
        "array",
        "date",
        "date-time",
        "file"
      ],
      "default": "string",
      "example": "string"
    },
    "linkParameter3": {
      "x-exclude": true,
      "type": "object",
      "required": [
        "in"
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "The label corresponding to the link parameter. This label is automatically translated based on the Accept-Language http header.",
          "example": "The translated label"
        },
        "value": {
          "type": "object",
          "description": "The value of the parameter. It can be an integer a string or an object.",
          "example": "1234"
        },
        "required": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "in": {
          "$ref": "#/definitions/parameterIn"
        },
        "lovLink": {
          "$ref": "#/definitions/LOVLink3"
        },
        "lovRequired": {
          "type": "boolean",
          "description": "If true, you MUST indicate a value from the list of values otherwise it's a freetext",
          "example": true
        },
        "description": {
          "type": "string",
          "description": "description of the parameter",
          "example": "the store identifier"
        },
        "schema": {
          "type": "string",
          "description": "schema of the parameter",
          "example": "orderListRequest"
        },
        "pattern": {
          "$ref": "#/definitions/validationPattern"
        },
        "properties": {
          "description": "If the parameter is an object with flexible properties (additionProperties/dictionary), we will describe the properties of the object.",
          "additionalProperties": {
            "$ref": "#/definitions/linkParameterProperty3"
          },
          "example": {
            "shipOrder": {
              "type": "â€‹string"
            }
          }
        }
      }
    },
    "validationPattern": {
      "type": "string",
      "description": "The regular expression to validate the value",
      "example": "*.-api$"
    },
    "linkParameterProperty3": {
      "x-exclude": true,
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "The label corresponding to the link parameter property. This label is automatically translated based on the Accept-Language http header.",
          "example": "The translated label"
        },
        "value": {
          "type": "object",
          "description": "The value of the parameter. It can be an integer a string or an object.",
          "example": "1234"
        },
        "required": {
          "type": "boolean",
          "example": true
        },
        "type": {
          "$ref": "#/definitions/parameterType"
        },
        "lovLink": {
          "$ref": "#/definitions/LOVLink3"
        },
        "lovRequired": {
          "type": "boolean",
          "description": "If true, you MUST use indicate a value from the list of values otherwise it's a freetext",
          "example": true
        },
        "description": {
          "type": "string",
          "description": "description of the parameter",
          "example": "the store identifier"
        },
        "schema": {
          "type": "string",
          "description": "schema of the parameter",
          "example": "orderListRequest"
        },
        "pattern": {
          "$ref": "#/definitions/validationPattern"
        }
      }
    },
    "linkParameter2": {
      "x-exclude": true,
      "type": "object",
      "x-deprecated": true,
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the parameter",
          "example": "marketplaceCode"
        },
        "value": {
          "type": "string",
          "description": "The value of the parameter",
          "example": "1234"
        },
        "required": {
          "type": "boolean",
          "example": true
        },
        "in": {
          "$ref": "#/definitions/parameterIn"
        },
        "type": {
          "$ref": "#/definitions/parameterType"
        },
        "lovLink": {
          "description": "This parameter expect the values indicated in this list of values.",
          "$ref": "#/definitions/LOVLink2"
        },
        "lovRequired": {
          "type": "boolean",
          "description": "If true, you MUST use indicate a value from the list of values otherwise it's a freetext",
          "example": true
        }
      }
    },
    "LOVLink2": {
      "description": "Describe the way you have to follow to get access to the LOV",
      "x-deprecated": true,
      "type": "object",
      "required": [
        "listName"
      ],
      "properties": {
        "rel": {
          "type": "string",
          "description": "Indicate the relation name related to the link",
          "example": "LOV_Go2CultureName"
        },
        "href": {
          "type": "string",
          "example": "/merchant/lov/v1/{listName}",
          "description": "Indicate the relative uri pattern to the list of value"
        },
        "listName": {
          "type": "string",
          "description": "The name of the list of value",
          "example": "Go2CultureName"
        }
      }
    },
    "LOVLink3": {
      "x-exclude": true,
      "description": "Describe the way you have to follow to get access to the LOV",
      "type": "object",
      "required": [
        "href"
      ],
      "properties": {
        "href": {
          "type": "string",
          "format": "uri",
          "example": "/merchant/lov/v1/Go2CultureName",
          "description": "Indicate the uri to the list of value"
        },
        "method": {
          "$ref": "#/definitions/httpMethod"
        }
      }
    },
    "httpUrl": {
      "x-exclude": true,
      "description": "The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>",
      "type": "string",
      "pattern": "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$",
      "x-pattern": "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$",
      "example": "http://www.mydomain.com"
    },
    "errorResponseMessage": {
      "x-exclude": true,
      "type": "object",
      "required": [
        "errors"
      ],
      "properties": {
        "errors": {
          "type": "array",
          "uniqueItems": false,
          "items": {
            "$ref": "#/definitions/userErrorMessage"
          }
        }
      }
    },
    "docUrl": {
      "x-exclude": true,
      "type": "string",
      "format": "uri",
      "description": "The documentation related to this operation.",
      "example": "https://api-docs.imn.io/#operation/EnableChannelCatalog"
    },
    "errorCode": {
      "x-exclude": true,
      "type": "string",
      "description": "the error code. The error code can be a pattern containing the argument's name",
      "example": "CatalogImportationAlreadyInProgress(ExecutionId currentCatalogImportationId)"
    },
    "cultureName": {
      "x-exclude": true,
      "type": "string",
      "description": "If the error is translated, the culture name will be indicated",
      "example": "en",
      "x-lov": "Go2CultureName"
    },
    "userErrorMessage": {
      "x-exclude": true,
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "docUrl": {
          "$ref": "#/definitions/docUrl"
        },
        "code": {
          "$ref": "#/definitions/errorCode"
        },
        "message": {
          "type": "string",
          "description": "The error message",
          "example": "There is already an importation in progress: b24d0dd8-a561-478a-9b26-34f573f03527\n"
        },
        "cultureName": {
          "$ref": "#/definitions/cultureName"
        },
        "arguments": {
          "$ref": "#/definitions/userErrorMessageArguments"
        }
      }
    },
    "userErrorMessageArguments": {
      "x-exclude": true,
      "type": "object",
      "description": "a dictionary string/object",
      "additionalProperties": {
        "type": "object"
      }
    },
    "infoSummaries": {
      "type": "object",
      "properties": {
        "successes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/successSummary"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/errorSummary"
          }
        },
        "warnings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/warningSummary"
          }
        },
        "informations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/infoSummary"
          }
        }
      }
    },
    "successSummary": {
      "type": "object",
      "properties": {
        "successCode": {
          "type": "string"
        },
        "successMessage": {
          "type": "string"
        },
        "successArguments": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "propertyName": {
          "type": "string"
        },
        "propertyValue": {
          "type": "string"
        },
        "objectName": {
          "type": "string"
        }
      }
    },
    "errorSummary": {
      "type": "object",
      "properties": {
        "utcDate": {
          "format": "date-time",
          "type": "string"
        },
        "errorGuid": {
          "format": "uuid",
          "type": "string"
        },
        "errorCode": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        },
        "technicalErrorMessage": {
          "type": "string"
        },
        "exceptionDetail": {
          "$ref": "#/definitions/exceptionDetail"
        },
        "errorArguments": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "propertyName": {
          "type": "string"
        },
        "propertyValue": {
          "type": "string"
        },
        "objectName": {
          "type": "string"
        },
        "source": {
          "type": "string"
        }
      }
    },
    "warningSummary": {
      "type": "object",
      "properties": {
        "technicalErrorMessage": {
          "type": "string"
        },
        "warningMessage": {
          "type": "string"
        },
        "warningCode": {
          "type": "string"
        },
        "warningArguments": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "infoSummary": {
      "type": "object",
      "properties": {
        "informationCode": {
          "type": "string"
        },
        "informationMessage": {
          "type": "string"
        },
        "informationArguments": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "propertyName": {
          "type": "string"
        },
        "propertyValue": {
          "type": "string"
        },
        "objectName": {
          "type": "string"
        }
      }
    },
    "exceptionDetail": {
      "type": "object",
      "properties": {
        "helpLink": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "stackTrace": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "marketplaceApiCredential": {
      "description": "The API credentials of the merchant on his marketplace.",
      "type": "object",
      "additionalProperties": {
        "type": "string",
        "example": {
          "login": "mylogin",
          "password": "myPassword"
        }
      }
    },
    "merchantMarketplaceBase": {
      "type": "object",
      "required": [
        "merchantCode",
        "marketplaceCode"
      ],
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        }
      }
    },
    "sort": {
      "x-excludeSql": true,
      "type": "string",
      "default": "ascending",
      "enum": [
        "ascending",
        "descending"
      ]
    },
    "operationSourceType": {
      "description": "Indicates the origin of the operation:\n* api: the operation has been done using our api directly.\n* ui: the operation has been done using our user interface. \n",
      "type": "string",
      "enum": [
        "api",
        "ui"
      ],
      "example": "api"
    },
    "processingStatus": {
      "x-exclude": true,
      "description": "The processing status of an operation",
      "type": "string",
      "enum": [
        "none",
        "inProgress",
        "done",
        "failed",
        "aborted"
      ]
    },
    "healthCheck": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Health check name",
          "example": "MyDatabaseCheck"
        },
        "message": {
          "type": "string",
          "description": "Gets the status message of the check.",
          "example": "Database connection OK"
        },
        "status": {
          "$ref": "#/definitions/healthCheckStatus"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "healthCheckStatus": {
      "type": "string",
      "description": "Possible status values of a health check result.\n* degraded:  The check is degraded, failing but not critical\n* healthy: The check is healthy\n* ignored: The check was ignored\n* unhealthy:  The check is unhealthy\n",
      "enum": [
        "degraded",
        "healthy",
        "ignored",
        "unhealthy"
      ]
    },
    "messageBase": {
      "x-exclude": true,
      "type": "object",
      "required": [
        "messageId",
        "correlationId"
      ],
      "properties": {
        "messageId": {
          "allOf": [
            {
              "x-excludeProperty": true
            },
            {
              "$ref": "#/definitions/messageId"
            }
          ]
        },
        "correlationId": {
          "$ref": "#/definitions/correlationId"
        },
        "causeId": {
          "$ref": "#/definitions/causeId"
        }
      }
    },
    "eventName": {
      "x-exclude": true,
      "description": "The event name",
      "type": "string"
    },
    "eventBase": {
      "x-exclude": true,
      "allOf": [
        {
          "$ref": "#/definitions/messageBase"
        },
        {
          "type": "object",
          "discriminator": "eventType",
          "required": [
            "eventName"
          ],
          "properties": {
            "eventName": {
              "$ref": "#/definitions/eventName"
            }
          }
        }
      ]
    }
  },
  "externalDocs": {
    "description": "Find the documentation for IMN's API here",
    "url": "https://api-docs.imn.io/"
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "in": "header",
      "name": "Ocp-Apim-Subscription-Key"
    }
  },
  "x-tagGroups": [
    {
      "name": "Marketplace - Merchants API",
      "tags": [
        "Marketplace - Merchants API - Global",
        "Marketplace - Merchants API - Merchants",
        "Marketplace - Merchants API - Api Credentials",
        "Marketplace - Merchants API - Subscription",
        "Marketplace - Merchants API - Marketplace Merchant Code"
      ]
    },
    {
      "name": "Marketplace API - Offers",
      "tags": [
        "Marketplace API - Offers - Global"
      ]
    },
    {
      "name": "Marketplaces - Orders",
      "tags": [
        "Marketplaces - Orders - Order Change Reporting",
        "Marketplaces - Orders - Batches"
      ]
    },
    {
      "name": "Marketplace API - List of Values",
      "tags": [
        "Marketplace API - List of Values - LOV"
      ]
    }
  ],
  "responses": {
    "orderBatchBadRequest": {
      "description": "In case there is an error like:\n- ValidationException\n- DuplicateOrderOperationException\n- InvalidMerchantCodeException\n- OrderManagementDisabledException\n",
      "x-exceptions": [
        "ValidationException",
        "DuplicateOrderOperationException",
        "InvalidMerchantCodeException",
        "OrderManagementDisabledException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "orderNotFound": {
      "description": "The requested order is not found.\n",
      "x-exceptions": [
        "OrderNotFoundException",
        "OrderManagementDisabledException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "orderChangeNotFound": {
      "description": "The requested order or correlation identifier is not found.",
      "x-exceptions": [
        "OrderNotFoundException",
        "OrderChangeNotFoundException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "orderChangeAlreadyInProgress": {
      "x-exceptions": [
        "OrderChangeAlreadyInProgressException"
      ],
      "description": "Already processing a change request for this Order.\\\nPlease refresh your clients Order information and retry later.\n",
      "headers": {
        "Retry-After": {
          "type": "integer",
          "description": "Indicates the duration in seconds to wait to be able to make this request again"
        }
      },
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "offerBatchBadRequest": {
      "description": "In case there is an error like:\n- ValidationException\n- DuplicateMerchantOfferOperationException\n- DuplicateMerchantMarketplaceOfferOperationException\n- InvalidMarketplaceCodeException\n- InvalidMerchantCodeException\n",
      "x-exceptions": [
        "ValidationException",
        "DuplicateMerchantOfferOperationException",
        "DuplicateMerchantMarketplaceOfferOperationException",
        "InvalidMarketplaceCodeException",
        "InvalidMerchantCodeException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "GeneralError": {
      "description": "Occurs when something goes wrong",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "304_NotModified": {
      "description": "The ETag sent in the http header If-None-Match did not change. So you are up to date !",
      "headers": {
        "Last-Modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification UTC date of the resource\\\nFor more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2\n"
        },
        "ETag": {
          "type": "string",
          "description": "ETag value to identify the current version of the resource\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n"
        }
      }
    },
    "412_PreConditionFailed": {
      "description": "The ETag sent in the http header If-Match did not match with the current version. Please refresh the information related to this resource.",
      "headers": {
        "ETag": {
          "type": "string",
          "description": "The ETag value to identify the resource.\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n"
        }
      }
    },
    "merchantNotFound": {
      "description": "The merchant code is not found.",
      "x-exceptions": [
        "MerchantCodeNotFoundException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "marketplaceNotFound": {
      "description": "The marketplace code is not found.",
      "x-exceptions": [
        "MarketplaceCodeNotFoundException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "invalidMarketplaceCredential": {
      "description": "The marketplace credential is invalid",
      "x-exceptions": [
        "InvalidMarketplaceCredentialException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "merchantOrMarketplaceNotFound": {
      "description": "The merchant code or marketplace code is not found.",
      "x-exceptions": [
        "MarketplaceCodeNotFoundException",
        "MerchantCodeNotFoundException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "merchantCodeAlreadyUsed": {
      "description": "The merchant code is not available",
      "x-exceptions": [
        "MerchantCodeAlreadyUsedException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "invalidMerchantCode": {
      "description": "The merchant code is different from the state",
      "x-exceptions": [
        "InvalidMerchantCodeException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "notOfferSourceMarketplace": {
      "description": "The marketplace is not the offer source",
      "x-exceptions": [
        "NotOfferSourceMarketplaceException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "subscriptionNotAccepted": {
      "description": "The subscription is not accepted by the marketplace",
      "x-exceptions": [
        "SubscriptionNotAcceptedException"
      ],
      "schema": {
        "$ref": "#/definitions/userErrorMessage"
      }
    },
    "credentialNotConfigured": {
      "description": "The credential is not configured for the marketplace",
      "x-exceptions": [
        "CredentialNotConfiguredException"
      ],
      "schema": {
        "$ref": "#/definitions/userErrorMessage"
      }
    }
  },
  "parameters": {
    "marketplaceOrderIdParameter": {
      "description": "The MKP Order identifier",
      "name": "marketplaceOrderId",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "marketplaceOrderId",
      "x-example": "CDISCOUNT12345"
    },
    "userNameInQueryParameter": {
      "name": "userName",
      "description": "Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application's user login.",
      "in": "query",
      "required": true,
      "type": "string"
    },
    "testModeInQueryParameter": {
      "name": "testMode",
      "description": "If true, the operation will be not be sent to marketplace. But the validation will be taken in account.",
      "in": "query",
      "required": false,
      "type": "boolean",
      "default": false,
      "x-example": false
    },
    "correlationIdParameter": {
      "name": "correlationId",
      "in": "path",
      "type": "string",
      "format": "CorrelationId",
      "required": true,
      "description": "It's the guid corresponding to the operation.\n"
    },
    "pageNumberQueryStringParameter": {
      "name": "pageNumber",
      "description": "The page number you want to get",
      "in": "query",
      "required": true,
      "type": "integer",
      "format": "int32",
      "minimum": 1,
      "x-minimum": 1,
      "x-example": 1
    },
    "pageSizeQueryStringParameter": {
      "name": "pageSize",
      "description": "The entry count you want to get",
      "in": "query",
      "required": true,
      "type": "integer",
      "format": "int32",
      "minimum": 25,
      "x-minimum": 25,
      "maximum": 100,
      "x-maximum": 100,
      "x-example": 25
    },
    "ifNoneMatchParameter": {
      "name": "If-None-Match",
      "type": "string",
      "in": "header",
      "required": false,
      "description": "ETag value to identify the last known version of requested resource.\\\nTo avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\\nIf the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n"
    },
    "ifMatchParameter": {
      "name": "If-Match",
      "in": "header",
      "type": "string",
      "required": true,
      "description": "ETag value to identify the last known version of requested resource.\\\nTo ensure that you are making a change on the lastest version of the resource.\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n"
    },
    "acceptLanguageParameter": {
      "name": "Accept-Language",
      "description": "Indicates that the client accepts the following languages.",
      "in": "header",
      "required": false,
      "type": "array",
      "collectionFormat": "csv",
      "items": {
        "type": "string"
      }
    },
    "acceptEncodingRequiredParameter": {
      "name": "Accept-Encoding",
      "description": "Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size.",
      "in": "header",
      "required": true,
      "type": "array",
      "collectionFormat": "csv",
      "items": {
        "type": "string"
      }
    },
    "acceptEncodingOptionalParameter": {
      "name": "Accept-Encoding",
      "description": "Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size.",
      "in": "header",
      "required": false,
      "type": "array",
      "collectionFormat": "csv",
      "items": {
        "type": "string"
      }
    },
    "walletPropertyCodeParameter": {
      "name": "walletPropertyCode",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The wallet document code"
    },
    "marketplaceCodeParameter": {
      "format": "MarketplaceCode",
      "name": "marketplaceCode",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The marketplace code"
    },
    "merchantCodeParameter": {
      "format": "MerchantCode",
      "name": "merchantCode",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The merchant code"
    }
  }
}